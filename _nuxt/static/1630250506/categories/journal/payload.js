__NUXT_JSONP__("/categories/journal", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv){return {data:[{term:{slug:"journal",title:W,path:"\u002Fcategories\u002Fjournal"},articles:[{slug:"reworking-tnt-vue-plugin-part-1",description:"Moving Vue Meta and Tailwind CSS into my TNT Vue plugin",title:"Reworking TNT: Creating a Vue Plugin - Part 1",authors:[Y],date:"2021-08-29T15:18:52.000Z",categories:[W],series:[Z],tags:[aq,ar,N,as],toc:[],body:{type:_,children:[{type:b,tag:g,props:{},children:[{type:b,tag:E,props:{href:aK},children:[{type:a,value:"When we left off"}]},{type:a,value:" I had added the dependency for Vue Meta to TNT and had installed and configured it in Dynamite UI. This was a problem, as preferably TNT would install its own dependencies without any extra configuration being required. So that's what we'll do today, and in doing so we will make TNT a sort-of \"proper\" Vue plugin. Let's look at how Vue Meta is initialised as an example:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,P]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:$}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,Q,A,H]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This is what we placed in Dynamite UI's "},{type:b,tag:h,props:{},children:[{type:a,value:aL}]},{type:a,value:". It installs Vue Meta as a Vue plugin. And this is something we want TNT to do instead. Meaning that actually that exact code should live somewhere in the TNT project, and Dynamite UI should instead feature:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aa]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aM}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,Q,A,H]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,aa]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"...and to achieve that, TNT needs to export an "},{type:b,tag:h,props:{},children:[{type:a,value:"install()"}]},{type:a,value:" function. This is all well documented in the Vue docs: "},{type:b,tag:E,props:{href:aN,rel:[ab,ac,ad],target:ae},children:[{type:a,value:aN}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Anyway, my install function is going to live in a new file in my TNT project at "},{type:b,tag:h,props:{},children:[{type:a,value:aO}]},{type:a,value:s}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd tnt\ntouch src\u002Findex.js\n"}]}]}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,P]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:$}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:at}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:au}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,aP]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:aQ}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,Q,A,H]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"When any project installing TNT includes "},{type:b,tag:h,props:{},children:[{type:a,value:aR}]},{type:a,value:" now, it should run everything inside of the "},{type:b,tag:h,props:{},children:[{type:a,value:av}]},{type:a,value:" funtion. In this case, just "},{type:b,tag:h,props:{},children:[{type:a,value:"Vue.use(VueMeta)"}]},{type:a,value:" for now. Let's see if that's worked:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Then in "},{type:b,tag:h,props:{},children:[{type:a,value:aS}]},{type:a,value:", I replace my old Vue Meta imports with TNT:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,P]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aT}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aa]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aM}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,Q,A,H]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,aa]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"And see if it runs..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn serve\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Ah-ha, problem... Unusual problem. Dynamite UI has ESLint installed and is complaining that it can't find an ESLint configuration for the files "},{type:b,tag:h,props:{},children:[{type:a,value:"..\u002Ftnt\u002Fsrc\u002Findex.js"}]},{type:a,value:s}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"Syntax Error: Error: No ESLint configuration found in \u002FUsers\u002Fthombruce\u002FDeveloper\u002Ftnt\u002Fsrc\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I expect this is a problem with "},{type:b,tag:h,props:{},children:[{type:a,value:aw}]},{type:a,value:" linked packages and wouldn't occur for a more typical installation (indeed it hasn't cropped up for other dependencies). Fortunately, there's an easy solution. In my Dynamite UI project, I just need to add to "},{type:b,tag:h,props:{},children:[{type:a,value:"vue.config.js"}]},{type:a,value:s}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:a,value:n},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:af}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:S}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n  configureWebpack"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n    resolve"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:" symlinks"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,"boolean"]},children:[{type:a,value:"false"}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"If I now try to "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:" again..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Success! Vue Meta is successfully being installed as a sort of sub-plugin of TNT. Perfect. But the configuration is still being handled by Dynamite UI..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"That's not strictly a problem. In the absence of the "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" attribute configured on my main Vue component, Daisy UI simply falls back to default theme behaviour. This is, in fact, preferable to a default configuration of my own as I believe it adjusts based on light\u002Fdark theme settings on the host machine. Let's move onto TailwindCSS config..."}]},{type:a,value:e},{type:b,tag:aU,props:{},children:[]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"There's quite a lot more going on to configure TailwindCSS in Dynamit UI. We have a "},{type:b,tag:h,props:{},children:[{type:a,value:ay}]},{type:a,value:" file and we need to manually "},{type:b,tag:h,props:{},children:[{type:a,value:"import '.\u002Findex.css'"}]},{type:a,value:" in "},{type:b,tag:h,props:{},children:[{type:a,value:aL}]},{type:a,value:". But these items don't yet diverge from what I would like TNT to provide as default behaviour. Ergo, TNT should handle these configurations and imports if possible."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The second part is easy. I'm just going to recreate the CSS file in my TNT project at "},{type:b,tag:h,props:{},children:[{type:a,value:"src\u002Fassets\u002Findex.css"}]},{type:a,value:s}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,"language-css"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,az]},children:[{type:b,tag:c,props:{className:[d,aA]},children:[{type:a,value:aB}]},{type:a,value:" base"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aC}]}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,az]},children:[{type:b,tag:c,props:{className:[d,aA]},children:[{type:a,value:aB}]},{type:a,value:" components"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aC}]}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,az]},children:[{type:b,tag:c,props:{className:[d,aA]},children:[{type:a,value:aB}]},{type:a,value:" utilities"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aC}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"...and import it from TNT's "},{type:b,tag:h,props:{},children:[{type:a,value:aO}]},{type:a,value:aV}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,P]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:$}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'.\u002Fassets\u002Findex.css'"}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:at}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:au}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,aP]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:aQ}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,Q,A,H]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Easy peasy! I can delete the references to this CSS file from the host project, Dynamite UI, and it's still working as intended. Perfect!"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"But the actual configuration of Tailwind is a little more difficult..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The question is: How does Tailwind know that it's installed? It's a better question than it sounds like. We've just discussed how TNT and Vue Meta are each acknowledged by the Vue app, but how does Vue know about Tailwind? Well..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"As well as a "},{type:b,tag:h,props:{},children:[{type:a,value:ay}]},{type:a,value:" file, my project also features a "},{type:b,tag:h,props:{},children:[{type:a,value:"postcss.config.js"}]},{type:a,value:" file with the contents:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:a,value:n},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:af}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:S}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n    tailwindcss"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:"\n    autoprefixer"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I believe we've discussed PostCSS previously - we had some version trouble. PostCSS is apparently part of the default Vue configuration, so Vue behind the scenes knows to look for this configuration file, and PostCSS in turn knows to look for these listed plugins. This, I believe, is all down to a hidden Webpack configuration. Webpack is a great tool, handles the packaging of... web things. Doesn't matter; point is it's doing this behind the scenes because of Vue CLI, which is the way that I generated this project. Vue CLI is cleverer than plain Vue - it brings along a lot of preconfigured conventions... a lot like Nuxt... so... a lot like what we've been trying to avoid. Thing is... my project should be installable in a Vue CLI project, in a Nuxt one, or just in a plain old Vue one. And I think understanding the configuration of a plain old Vue one would inform decisions made for Vue CLI and for Nuxt. We in fact already have a separate repo for Nuxt installations - might we also consider one for Vue CLI? They will, "},{type:b,tag:w,props:{},children:[{type:a,value:aW}]},{type:a,value:" be incompatible with one another, but that's all the more reason to have a base project that works a certain way with just plain old Vue."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"All of that is to say, I have made a mistake. Dynamite UI was generated with Vue CLI, but I need to take a step backwards, go another layer up the abstraction ladder and consider how a very simple Vue project would install this package..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"In other words... I'm going to call this entry right here and we'll begin a fresh project in the next one."}]}]},dir:ag,path:"\u002Fblog\u002Freworking-tnt-vue-plugin-part-1",extension:ah,createdAt:M,updatedAt:M},{slug:aK,description:"Adding Vue Meta to my TNT Vue.js plugin",title:"Reworking TNT: Vue Meta",authors:[Y],date:"2021-08-28T00:59:19.000Z",categories:[W],series:[Z],tags:[aq,ar,N,as],toc:[],body:{type:_,children:[{type:b,tag:g,props:{},children:[{type:a,value:"In "},{type:b,tag:E,props:{href:aX},children:[{type:a,value:"my last entry"}]},{type:a,value:", I added a little data attribute directly to the HTML tag on my new project, Dynamite UI. This is something that I said I would ideally address in the future - a configuration that, actually, should be handled by the TNT plugin. Well... I'm back and I have the solution. It occurred to me while doing something else entirely, actually: there was nothing special about the way it worked with the Nuxt module, it was just "},{type:b,tag:E,props:{href:"https:\u002F\u002Fvue-meta.nuxtjs.org\u002F",rel:[ab,ac,ad],target:ae},children:[{type:a,value:"Vue Meta"}]},{type:a,value:". I had thought it was something I'd added to my Nuxt config, which it was, but it was a configuration option that gets passed along to Vue Meta. So, what is Vue Meta?"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Vue Meta is actually developed by the people behind Nuxt... at least, I think it is. It's official site is a subdomain of nuxtjs.org. It's a plugin that enables the addition of tags and meta attributes to the HTML document's "},{type:b,tag:h,props:{},children:[{type:a,value:"\u003Chead\u003E"}]},{type:a,value:" tag. This is typically off limits to Vue components, but Vue Meta makes it possible to define and overwrite attributes directly from Vue components. And for my purposes right now, it also exposes a "},{type:b,tag:h,props:{},children:[{type:a,value:"htmlAttrs"}]},{type:a,value:" object for defining attributes for the "},{type:b,tag:h,props:{},children:[{type:a,value:aE}]},{type:a,value:" tag itself. That's all I need to avoid having to directly write my DaisyUI theme data attribute into the HTML template in all of my Vue projects - I can move it now into a configuration option. Let's install..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd tnt\nyarn add vue-meta\ngit add . && git commit -m \"Install vue-meta\"\ngit push\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Unfortunately, I'm still not ready to configure features in the TNT Vue plugin, so I'll need to do that over on Dynamite UI..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I need to tell Vue to import and use it in my "},{type:b,tag:h,props:{},children:[{type:a,value:aS}]},{type:a,value:aV}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,P]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aT}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:I}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,P]},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:K}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:$}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,Q,A,H]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"When TNT is a proper Vue plugin, it will actually export a Vue install method and we will instead write something like "},{type:b,tag:h,props:{},children:[{type:a,value:aR}]},{type:a,value:". This then would include the code above, so that telling Vue to \"use\" TNT, it follows that TNT tells Vue to also \"use\" Vue Meta. We'll try to document that when we revisit and do convert this into a proper plugin. For now, Vue Meta is packaged by TNT but installed manually in the projects using TNT."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"At this point, though, I should be able to... Remove "},{type:b,tag:h,props:{},children:[{type:a,value:"data-theme=\"cupcake\""}]},{type:a,value:" from the "},{type:b,tag:h,props:{},children:[{type:a,value:aE}]},{type:a,value:" tag in "},{type:b,tag:h,props:{},children:[{type:a,value:aY}]},{type:a,value:aZ}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Instead, add the attribute to... I guess "},{type:b,tag:h,props:{},children:[{type:a,value:"src\u002FApp.vue"}]},{type:a,value:" for now:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,a_]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,V]},children:[{type:b,tag:c,props:{className:[d,V]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:a$}]},{type:a,value:aF}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]}]},{type:b,tag:c,props:{className:[d,aF]},children:[{type:b,tag:c,props:{className:[d,"language-javascript"]},children:[{type:a,value:e},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:at}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,o,n]},children:[{type:a,value:au}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n  metaInfo"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n    htmlAttrs"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'data-theme'"}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'cupcake'"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:b,tag:c,props:{className:[d,V]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"\u003C\u002F"}]},{type:a,value:aF}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"And when I now "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:"... Success! The DaisyUI 'Cupcake' theme is still being used, now courtesy of Vue Meta. Even better, this little exercise has made it a clearer how I go about turning TNT into a proper Vue plugin. That still to come, next time..."}]}]},dir:ag,path:"\u002Fblog\u002Freworking-tnt-vue-meta",extension:ah,createdAt:M,updatedAt:M},{slug:aX,description:"Reconfiguring my Nuxt template module so that it also works with Vue.js",title:"Reworking TNT: Thom's Nuxt Template without Nuxt",authors:[Y],date:"2021-08-26T22:36:35.000Z",categories:[W],series:[Z],tags:[aq,ar,N,as],toc:[{id:bb,depth:aj,text:bc}],body:{type:_,children:[{type:b,tag:g,props:{},children:[{type:a,value:"If you don't already know, TNT is a work in progress Nuxt module I've been working on to simplify the setup of my Nuxt projects. It comes with TailwindCSS and DaisyUI, each with some pre-configurations so that things like theme-switching and CSS purging work. It also comes with the Nuxt Font Awesome module, my own Nuxt Taxonomies project, Lodash, Luxon and Pug... and it insists that Nuxt Content should be a peer dependency (meaning it doesn't install it itself, but your project would be expected to have it installed separately). So a lot of that is Nuxt-specific, but I would like to use Pug, Luxon, Lodash and Tailwind as common dependencies of my Vue projects too. And I would like many of the components I've written or will write for TNT to be available to Vue.js projects as well. What does this mean? Well... I'm going to have to do some rewriting. Ideally, I don't want to be maintaining two wholly distinct libraries to roughly do the same thing for two frameworks, particularly while the frameworks are very closely related. Instead... I either want one library that can be installed in projects of either framework, or I want my Nuxt-specific library to inherit from the Vue one, given that Nuxt is really just an extension of Vue. That's easier said than done. Like I said, this little library is heavily dependent on Nuxt at the moment. And it's possible we'll lose some of the desirable features of those Nuxt versions of libraries by replacing them with either packages made for just Vue instead, or general-purpose ones intended for any NPM-managed project. We'll have to ask the questions: What am I losing by replacing Nuxt Tailwind with just TailwindCSS? What am I losing by replacing Nuxt Font Awesome with Vue Font Awesome or with just Font Awesome? How do we reconcile the inclusion of Nuxt Taxonomies in Vue projects it's completely irrelevant to? If those losses are undesirable or even impermissible, what is the best approach to separate out Nuxt dependencies whilst keeping the core part of TNT's development in one place?"}]},{type:a,value:e},{type:b,tag:ak,props:{id:bb},children:[{type:b,tag:E,props:{href:"#creating-dynamite",ariaHidden:al,tabIndex:am},children:[{type:b,tag:c,props:{className:[an,ao]},children:[]}]},{type:a,value:bc}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So, one small part of the reason I started TNT is that I thought such a template could ultimately be useful for creating websites for clients. It currently features two distinct styles of layout and, thanks to DaisyUI, more than a dozen themes. It's intended to be versatile, then. It's also intended to permit me to stop overthinking decisions about UI frameworks and CSS libraries. TailwindCSS makes every component very customisable, while DaisyUI provides a solid foundation for making those customisations. TNT, I thought, would be a strong starting point for any of my projects, whether it be a simple blogging website or a rich application dashboard. And honestly it's well on its way. But it's Nuxt dependent, and not all of my Vue projects will be Nuxt ones. At least I never intended for that to be the case, and now that I've reviewed how I might integrate a Vue or Nuxt frontend with a Rails backend... I don't think it can be. So, I need a new Vue project to play around with. For that, I'm going to make a start on Dynamite CMS, a sort of cousing to my TNT project - it's a content management system intended to work in particular with content websites created using TNT. We'll see if that intention remains the same as the project progresses, for now I just need a simple Vue application where I can play with my TNT template library. Let's create that..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"vue create dynamite-ui\ncd dynamite-ui\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The "},{type:b,tag:h,props:{},children:[{type:a,value:"vue"}]},{type:a,value:" command depends on Vue CLI being installed and runs an interactive menu allowing me to choose various options. Most of these aren't relevant to the discussion, except that I am specifically "},{type:b,tag:w,props:{},children:[{type:a,value:"not"}]},{type:a,value:" initialising the project with a CSS pre-processor. The project will be using TailwindCSS, PostCSS and - I think - PurgeCSS, which can't be installed that way. Plus, they will be part of TNT, not the parent project."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Here's what I'm thinking comes next..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add --dev https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This will install TNT, which I know I've said will be incompatible with Vue... but I don't really know just "},{type:b,tag:w,props:{},children:[{type:a,value:"how incompatible"}]},{type:a,value:" it will be. Maybe this way I can get a sense of what works, what doesn't, and what I need to change."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Predictably after running that command, there are a lot of things installed that I do not want. So I'm gonna jump on over to TNT..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\ngit co -b vue\ngit push --set-upstream origin vue\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I've also checked out a brand new branch called 'vue' and set the upstream branch on GitHub to this new branch. Not exactly what that means, but if you're unfamiliar with Git or version control at all... essentially now I can make as many modifications as I want without losing the previous state, which is saved as a separate branch on GitHub. Used properly, you always maintain a detailed history with version control meaning you can reset the project at any time to any previous point in time. It also facilitates collaboration, testing, etc. If you're a developer not using version control, start."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"What next? Now I need to do what I just said and butcher TNT a little. Remove all the Nuxt dependencies and replace them with Vue or non-framework-specific ones."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The main script aside, the TNT project essentially consists of four folders: assets, components, layouts and plugins. Of these, assets and plugins should have no problems. We can incorporate their contents into a Vue project with relative ease. In my components and layouts folders, however... well, let's ignore layouts for now - it actually is Nuxt specific. The components folder, however, has several instances of "},{type:b,tag:h,props:{},children:[{type:a,value:bd}]},{type:a,value:" and the "},{type:b,tag:h,props:{},children:[{type:a,value:be}]},{type:a,value:" component being used. We can ignore the instances of the "},{type:b,tag:h,props:{},children:[{type:a,value:be}]},{type:a,value:" component, as these are layout-specific, but those NuxtLinks do need to be addressed before the same components will work in Vue. That part's easy; for the most part, "},{type:b,tag:h,props:{},children:[{type:a,value:bd}]},{type:a,value:" just becomes "},{type:b,tag:h,props:{},children:[{type:a,value:"RouterLink"}]},{type:a,value:"... "},{type:b,tag:w,props:{},children:[{type:a,value:"I think that still works in Nuxt..."}]},{type:a,value:" But actually there are a lot of other problems with these components: uses of the "},{type:b,tag:h,props:{},children:[{type:a,value:"fetch()"}]},{type:a,value:" hook, uses of Nuxt Content, Nuxt Taxonomies and some Nuxt variables. I don't want to sacrifice some of that, so I've made a decision..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"There will at least be two directories (probably two separate libraries). One for Vue components, and one for Nuxt components. The Nuxt components will use, inherit from and extend the Vue ones with Nuxt functionality. The Vue ones will be more general purpose, unable to utilise some of Nuxt's features."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So we probably want to start a new project entirely. TNT should be general purpose, working for both Vue and Nuxt; a separate project, "},{type:b,tag:w,props:{},children:[{type:a,value:"Nuxt TNT"}]},{type:a,value:", should expand upon it. "},{type:b,tag:w,props:{},children:[{type:a,value:"Decision made!"}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I've moved "},{type:b,tag:h,props:{},children:[{type:a,value:bf}]},{type:a,value:" to "},{type:b,tag:h,props:{},children:[{type:a,value:"@thombruce\u002Fnuxt-tnt"}]},{type:a,value:" and have started a brand new project in the old namespace. The docs remain in the "},{type:b,tag:h,props:{},children:[{type:a,value:bf}]},{type:a,value:" repo, but other than that it is barebones at the moment. Time to start migrating some components and picking out our dependencies. I won't worry for now about having Nuxt TNT inherit from the new project - that can be left as an exercise for later. For now, I'm simply aiming to get some of that TNT goodness to work for Vue projects not using Nuxt."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"After some messing around, I have a clean TNT repository with no code. But it's pushed to GitHub, so jumping back across to my new Dynamite UI project, I can install this empty package..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn remove @thombruce\u002Ftnt\nyarn cache clean # To clean up any references to the old version and its Git history\nyarn add https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I've removed the old and installed the new. Now I want to be able to actively develop this and see the results on my own machine without having to push the dependency. Fortunately, there's "},{type:b,tag:h,props:{},children:[{type:a,value:aw}]},{type:a,value:B}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn link\ncd ..\u002Fdynamite-ui\nyarn link @thombruce\u002Ftnt\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, Dynamite UI will use the local, linked version of TNT in development on my machine, so any changes I make will be applied almost immediately (definitely immediately if I have Hot Module Replacement up and running). Time to start actually adding dependencies and components to this thing!"}]},{type:a,value:e},{type:b,tag:aU,props:{},children:[]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The first dependency I want to install is Pug. I don't know how easy this is going to be though. Usually I can just "},{type:b,tag:h,props:{},children:[{type:a,value:"vue add pug"}]},{type:a,value:" and depend on Vue CLI's implementation, but as I'm working on a plugin I think I'll take my old approach..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn add pug pug-plain-loader\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, that's - I think - all that's required to get Pug working in the TNT plugin. Unfortunately I don't know if the new dependency will be installed over on Dynamite UI as a linked module... I may need to push TNT and "},{type:b,tag:h,props:{},children:[{type:a,value:"yarn upgrade @thombruce\u002Ftnt --latest"}]},{type:a,value:". "},{type:b,tag:h,props:{},children:[{type:a,value:aw}]},{type:a,value:" was maybe not made for managing nested dependencies - it wasn't. But if I do remember rightly, Vue should have no problem with just the addition of pug and pug-plain-loader to dependencies. I think Webpack detects their presence, and so no additional config will be needed... at least once I do get this properly installed over on Dynamite UI. But since I need to push and then upgrade, I may as well get a few other dependencies installed too. I certainly want..."}]},{type:a,value:e},{type:b,tag:aG,props:{},children:[{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Pug"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"TailwindCSS"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"TailwindCSS Forms"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"DaisyUI"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Theme Change"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"PostCSS (though I think this is already installed)"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Lodash"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Luxon"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"That's all of the dependencies from Nuxt TNT except the icon libraries and those that are Nuxt-specific. "},{type:b,tag:w,props:{},children:[{type:a,value:"We'll revisit icon libraries later."}]},{type:a,value:" Fortunately the only dependency listed above that I was using a Nuxt-specific version of is TailwindCSS; all others are general purpose. So picking the packages to install is pretty easy..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The TailwindCSS docs suggest an install command of "},{type:b,tag:h,props:{},children:[{type:a,value:"npm install -D tailwindcss@latest postcss@latest autoprefixer@latest"}]},{type:a,value:", which includes PostCSS (we believe already installed) and Autoprefixer, which we definitely want too, so... they join the installation:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add tailwindcss@latest postcss@latest autoprefixer@latest @tailwindcss\u002Fforms daisyui lodash luxon theme-change\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"And since we need to push the project to upgrade it over on Dynamite UI..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"git add .\ngit commit -m \"Install dependencies\"\ngit push\ncd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Checking the Yarn lockfile over on Dynamite UI, I can confirm that my dependencies are properly installed. To be doubly sure that at least Pug is working, I've modified the default app template of Dynamite UI to express itself in Pug format and I'm running "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:"... Navigating to localhost:8080 in my browser... Yup, that appears to be working!"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I'm also confident that Lodash, Luxon and Theme Change are all installed fine, as I will be importing these directly for the most part and don't need global access to them. They're installed, so they're installed successfully."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"TailwindCSS, PostCSS, Autoprefixer, TailwindCSS Forms and DaisyUI... Those need more configuration, and that's not easy or immediately apparent how to achieve. With Nuxt, I benefited from a bunch of build hooks that I could tap into to: 1. Configure the installation in the TNT package itself, and 2. Allow for this configuration to be overwritten per project."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"It's been a little while since I made a proper Vue plugin, so I don't know what options are available to me. For the time being, I think I'm going to configure TailwindCSS directly in the Dynamite UI project... That way I can get a feel for what sort of configuration needs to made and what I need to be able to overwrite."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"# Still in dynamite-ui\nnpx tailwindcss init -p\ngit add . && git commit -m \"Tailwind: npx tailwindcss init -p\"\n# Modify Tailwind config to enable PurgeCSS\ngit add . && git commit -m \"Tailwind: Configure PurgeCSS\"\n# Configure Tailwind CSS\ngit add . && git commit -m \"Tailwind: Configure default CSS\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"These are the steps detailed at "},{type:b,tag:E,props:{href:bg,rel:[ab,ac,ad],target:ae},children:[{type:a,value:bg}]},{type:a,value:". I've also committed each step so that I will be able to review my git history and see these changes specifically, and in order."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"TailwindCSS Forms is also very easy to add. Just require it from the plugins section in "},{type:b,tag:h,props:{},children:[{type:a,value:ay}]},{type:a,value:aZ}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:a,value:n},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:af}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:S}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aH}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bh}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Done. Don't forget to commit the change:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"# Add TailwindCSS forms as a Tailwind plugin\ngit add . && git commit -m \"Tailwind: Add Tailwind Forms plugin\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"DaisyUI and and Theme Change are a little more involved. In fact... I never fully got Theme Change working properly with the Nuxt package, though it was close enough - it changed themes, but it didn't successfully load the correct theme on subsequent visits. That's an issue I'll address in the future."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"DaisyUI itself is easy enough to add. Like TailwindCSS Forms, all we need to do is require it as a plugin in our Tailwind config. We'll also safelist the data-theme attribute here so that DaisyUI's themes aren't purged by PurgeCSS:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,F]},children:[{type:b,tag:h,props:{},children:[{type:a,value:n},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:af}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:S}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n  purge"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n    options"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n      safelist"},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aH}]},{type:a,value:"\n        "},{type:b,tag:c,props:{className:[d,"regex"]},children:[{type:b,tag:c,props:{className:[d,bi]},children:[{type:a,value:bj}]},{type:b,tag:c,props:{className:[d,"regex-source","language-regex"]},children:[{type:a,value:X},{type:b,tag:c,props:{className:[d,"anchor",A]},children:[{type:a,value:"$"}]}]},{type:b,tag:c,props:{className:[d,bi]},children:[{type:a,value:bj}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aJ}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:s}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aH}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bh}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'daisyui'"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:U}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Generally, I think it's supposed to be a good idea to require DaisyUI last... The DaisyUI docs say nothing about TailwindCSS Forms, but they do suggest that if we were using TailwindCSS Typography (a plugin for applying typographic styles to content over which we have little markup control) then it should be required after that because it extends some of its styles. We'll just roll with the assumption that DaisyUI should come last unless otherwise specified."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"We also need to add that "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" attribute to our HTML tag in "},{type:b,tag:h,props:{},children:[{type:a,value:aY}]},{type:a,value:". There has to be a better way to do this, but for now we'll do this the easy way:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,a_]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,"doctype"]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"\u003C!"}]},{type:b,tag:c,props:{className:[d,"doctype-tag"]},children:[{type:a,value:"DOCTYPE"}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,"name"]},children:[{type:a,value:bk}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,V]},children:[{type:b,tag:c,props:{className:[d,V]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:a$}]},{type:a,value:bk}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bl]},children:[{type:a,value:"lang"}]},{type:b,tag:c,props:{className:[d,bm]},children:[{type:b,tag:c,props:{className:[d,f,bn]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ap}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bl]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,bm]},children:[{type:b,tag:c,props:{className:[d,f,bn]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ap}]},{type:a,value:"cupcake"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ap}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Let's commit all of that..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"git add . && git commit -m \"Tailwind: Add DaisyUI plugin\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, the issue is Theme Change... I'm actually going to double-back and remove Theme Change for now:"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn remove theme-change\ngit add . && git commit -m \"Uninstall theme-change\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Why do that? Because actually adding "},{type:b,tag:h,props:{},children:[{type:a,value:X}]},{type:a,value:" directly to the "},{type:b,tag:h,props:{},children:[{type:a,value:aE}]},{type:a,value:" tag above is a mess-enough for the time being, and because being able to change the theme on the fly isn't critical to my development. There are things I want to manage before we reach that point."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"But where are we at now?"}]},{type:a,value:e},{type:b,tag:aG,props:{},children:[{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"TailwindCSS and DaisyUI should each be properly installed"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Pug we already know is working"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Lodash and Luxon are safely assumed to be ready to use"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This puts me in position to start adding my own templates and components! For the time being, we'll grant that many of the steps above are required to get the TNT plugin working - we'll refine that in the future. The last thing to do at this stage is to create a layout and a component using Tailwind and DaisyUI; and if that works, we've completed this setup."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"One quick copying over of one of my TNT layouts and... Error!"}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"Error: PostCSS plugin tailwindcss requires PostCSS 8.\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Not to worry, I've seen this before. In fact, it's an issue that the Tailwind team are aware of an provide a solution to: "},{type:b,tag:E,props:{href:bo,rel:[ab,ac,ad],target:ae},children:[{type:a,value:bo}]},{type:a,value:" So then..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn remove tailwindcss postcss autoprefixer\nyarn add tailwindcss@npm:@tailwindcss\u002Fpostcss7-compat postcss@^7 autoprefixer@^9\ngit add . && git commit -m \"Use TailwindCSS Compatibility version\"\ngit push\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This swaps out the latest version of Tailwind for a compatibility version, the same in every way apparently apart from that it maintains compatibility with older versions of PostCSS."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Let's jump back across to DynamiteUI..."}]},{type:a,value:e},{type:b,tag:j,props:{className:[k]},children:[{type:b,tag:l,props:{className:[m,p]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\nyarn serve\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Success! TailwindCSS is now working, DaisyUI and the chosen theme as well, my custom layout..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, it isn't ideal. A lot has been done on DynamiteUI that I'd rather be done in the TNT plugin, but this is a start. It's a lot easier to migrate that functionality up the stream so to speak into TNT than it is to fiddle endlessly with plugin functionality."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This is the first step. I'm in a position to start developing, because the dependencies I need are all now installed by the one package... they just aren't yet configured by it. We might cover configuring Vue plugins in another post soon, but I'm calling this one here. I have some tidying up and some developing to do."}]}]},dir:ag,path:"\u002Fblog\u002Freworking-tnt-without-nuxt",extension:ah,createdAt:M,updatedAt:M},{slug:"the-perfect-open-source-web-architecture",description:"Open source software should be free for all, easy to develop and easy to deploy",title:"In Consideration of the Perfect Open Source Architecture for Web-based Apps",authors:[Y],date:"2021-08-21T14:51:08.000Z",categories:[W],series:[Z],tags:null,toc:[{id:bp,depth:aj,text:bq},{id:br,depth:aj,text:bs},{id:bt,depth:aj,text:bu}],body:{type:_,children:[{type:b,tag:g,props:{},children:[{type:a,value:"In my blog post yesterday I declared my intention to make three web-apps - "},{type:b,tag:w,props:{},children:[{type:a,value:"Hosted"}]},{type:a,value:", "},{type:b,tag:w,props:{},children:[{type:a,value:"Marmalade"}]},{type:a,value:" and "},{type:b,tag:w,props:{},children:[{type:a,value:"Dynamite CMS"}]},{type:a,value:" - each of which would be built on, "},{type:b,tag:w,props:{},children:[{type:a,value:"probably"}]},{type:a,value:", Ruby on Rails. That part is... a little selfish. I mean it makes sense; Ruby is a beloved language with a lot of support and development in the open source community. But also... it's the language that my career is based on, and that's the main reason I'm pushing for it. Which again... makes sense. I've worked with Ruby for about ten years, so I of course should run with it as my experience will be of great benefit while managing such a project. That said, it doesn't couple with Nuxt as I'd hoped it might... and other backends like Node.js' Express do. I know for a fact I want what at least functions like a single-repository installation - one click deploys and all that good stuff; essentially something that behaves like a monorepo. If I really want to use Nuxt then... well, the choice should probably be Express. I can couple Vue, the framework Nuxt is based on, with Rails just fine but... do I lose the capability to offer a frontend only install? Say for anyone wanting to deploy their own frontend but using a hosted API? Or for packaging the project as a desktop or mobile app. That is possible with Rails, but a JavaScript Single Page Application (SPA) is probably preferred, right?"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Mainly I'm muddling through all of these questions because I have a contradiction of wants: I want to use Rails, I want to use Nuxt. I can't use both unless... they're separate repositories, and then I lose some ease of installation. As a compromise, I can use Vue in place of Nuxt but I wouldn't have access to my own TNT project unless I modified it extensively... which I'm not ruling out, but that will be a later consideration. Okay, but let's try to reconcile this. What is my philosophy for open source application development? And how do I match that philosophy in application?"}]},{type:a,value:e},{type:b,tag:ak,props:{id:bp},children:[{type:b,tag:E,props:{ariaHidden:al,href:"#the-philosophy",tabIndex:am},children:[{type:b,tag:c,props:{className:[an,ao]},children:[]}]},{type:a,value:bq}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Okay, so these are hobby projects and I want them to be..."}]},{type:a,value:e},{type:b,tag:bv,props:{},children:[{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Free Software"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Open Source"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Easy to install"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Easy to develop"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Free doesn't necessarily mean absolutely free, but I do mean free as in both liberty and beer. Developers should be able to take the project, adapt it, redistribute it, and they should be able to run it without having to pay. There'll be some caveats to how "},{type:b,tag:w,props:{},children:[{type:a,value:"free"}]},{type:a,value:" it is dependent upon choice of "},{type:b,tag:w,props:{},children:[{type:a,value:"free software"}]},{type:a,value:" or "},{type:b,tag:w,props:{},children:[{type:a,value:"open source"}]},{type:a,value:" license, and running it at no cost will be possible but likely to run into hosting costs eventually - the point being there's no payment required to actually use the open source software. And it should be open source, meaning developers can read the source code, contribute to it, creating extensions of it. To ensure that it is easy to develop, the code should be well written, well documented and ultimately well tested. All of this is the easy part."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The hard part is ease of installation. I don't want any developer or other user to have to install several different parts just to get the application running. If they want to host and run the software, this should ideally be a one-click process. Similarly, if they want to run the frontend elsewhere and benefit from someone else's hosting (either paid or provided freely), this too should ideally be a one-click process with ideally only one or two details to configure (the host domain for the backend). Maybe it should have a default host, meaning a true one-click deploy but potentially giving favourable weight to my own hosted solution... or maybe it should ideally also run without requiring a backend. That isn't always possible, but a lot of applications could in fact work with just browser storage alone - this may work with one of the three I'm planning here."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So, it should be free to use, free to modify and redistribute, open to contributions with a clear process and good documentation, and it should install with minimal effort. How do we achieve that?"}]},{type:a,value:e},{type:b,tag:ak,props:{id:br},children:[{type:b,tag:E,props:{ariaHidden:al,href:"#the-application",tabIndex:am},children:[{type:b,tag:c,props:{className:[an,ao]},children:[]}]},{type:a,value:bs}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"In order to keep the software free (as in liberty and beer), we just need to choose the right license. As well as the right license, I'll also want to encourage donations and sponsorships so that continuous development can be justified without the end user having to pay anything to use the software. Broadly... there should be options. Like, I can't right now justify hosting an online application for any number of users at no cost to them; but I will always be able to justify making that software free for them to install and host themselves. Perhaps a ways down the line, we can have a paid service model that offers managed hosting, but I'll always keep the core, open source project free in the sense of both liberty and beer."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Ease of development is very much a case of keeping code well-written, well-documented and well-tested. In these efforts, we will benefit from the underlying tech stack being well-supported and loved by the community. I've pretty much settled on Ruby and Vue for the back and front end respectively - these both have large, supportive communities. Ease of development then is just a matter of ensuring that the code always remains clear, documented and tested. It also ties into whether or not the software is easy to install; ideally, a developer should be able to pull the project once and get it running without any unconventional changes in their setup. That is to say, if they have Ruby and they have Node installed, this should run on their system no problem. The rest of the stack, then, should be environment agnostic. "},{type:b,tag:w,props:{},children:[{type:a,value:"Maybe"}]},{type:a,value:" there are some configurations I do need to make, like favouring a certain database, but we'll aim to avoid this as much as possible."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"What does that leave? Ease of installation, which is the same as ease of deployment really. And when I speak about deployment, I want it to mean to varied environments. For instance, to the web - that's the easy part - to desktop applications and to mobile. Now, I've deployed Vue apps as desktop and mobile apps in the past, but this - "},{type:b,tag:w,props:{},children:[{type:a,value:aW}]},{type:a,value:" - requires a little bit of decoupling from the Ruby on Rails backend. I see two applications here:"}]},{type:a,value:e},{type:b,tag:bv,props:{},children:[{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"The Vue application, capable of running in browser or in a wrapper as either a desktop or mobile application."}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"The Ruby backend, which serves both an API as well as the Vue application if it is navigated to via HTTP."}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"And both of these should be runnable with a single-click installation, but importantly the Vue app that the Ruby backend does serve is the same as the first application."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So then... two projects? The Vue application itself, then the Ruby backend which includes that application as a dependency or perhaps as a submodule? ... Maybe. The problem with a dependency approach is that it does run counter to one ease of development principle; if a dev goes looking to modify the frontend but the frontend is an external dependency, suddenly they need to install and perhaps even fork an entirely separate application. I just need to decide whether this is two repos or just the one monorepo."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Honestly, didn't think I'd go this way but I am leaning towards trying to put this together as a monorepo. The frontend would sit in a dedicated directory, and the root "},{type:b,tag:h,props:{},children:[{type:a,value:"package.json"}]},{type:a,value:" file could list all of the scripts and dependencies needed for both aspects of the project. However... I'm undecided and I think I will go with two separate repositories initially, if only because it's a pattern I've worked with before."}]},{type:a,value:e},{type:b,tag:ak,props:{id:bt},children:[{type:b,tag:E,props:{ariaHidden:al,href:"#in-summary",tabIndex:am},children:[{type:b,tag:c,props:{className:[an,ao]},children:[]}]},{type:a,value:bu}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So in conclusion... We have a sort of checklist of considerations and answers to those considerations:"}]},{type:a,value:e},{type:b,tag:aG,props:{},children:[{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Choose a license (I'll probably stick with MIT initially but change it up later if it makes sense)"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Keep it well documented, well tested and open"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Separate the front and backend, but relate via dependency for ease of installation of every aspect of the application"}]},{type:a,value:e},{type:b,tag:q,props:{},children:[{type:a,value:"Monorepo or separate repos? (We'll go with separate for the time being, but a monorepo does sound attractive - can change this later)"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Gonna continue to detail the process as I build this out in future blog entries."}]}]},dir:ag,path:"\u002Fblog\u002Fthe-perfect-open-source-web-architecture",extension:ah,createdAt:M,updatedAt:M}],_img:{}}],fetch:{},mutations:void 0}}("text","element","span","token","\n","punctuation","p","code"," ","div","nuxt-content-highlight","pre","line-numbers","module","keyword","language-text","li","maybe-class-name",":","{","}","operator","em","string","\n  ",",","function",".","(",")","a","language-js","Vue","property-access","import","VueMeta","from","\n    ","2021-08-29T15:20:09.924Z","TNT","\n\n","imports","method","use","=","comment","\u002F\u002F ...","tag","Journal","data-theme","Thom Bruce","My Process","root","'vue-meta'","constant","nofollow","noopener","noreferrer","_blank","exports","\u002Fblog",".md","\u003E",2,"h2","true",-1,"icon","icon-link","\"","Vue.js","NuxtJS","Dynamite","export","default","install","yarn link","yarn serve","tailwind.config.js","atrule","rule","@tailwind",";","\n  plugins","\u003Chtml\u003E","script","ul","[","require","]","reworking-tnt-vue-meta","main.js","'@thombruce\u002Ftnt'","https:\u002F\u002Fvuejs.org\u002Fv2\u002Fguide\u002Fplugins.html","src\u002Findex.js","parameter"," options","Vue.use(TNT)","src\u002Fmain.js","'vue'","hr"," file:","I think","reworking-tnt-without-nuxt","public\u002Findex.html"," and...","language-html","\u003C","\n      ","creating-dynamite","Creating Dynamite","NuxtLink","\u003CNuxt \u002F\u003E","@thombruce\u002Ftnt","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Fguides\u002Fvue-3-vite","'@tailwindcss\u002Fforms'","regex-delimiter","\u002F","html","attr-name","attr-value","attr-equals","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Finstallation#post-css-7-compatibility-build","the-philosophy","The Philosophy","the-application","The Application","in-summary","In Summary","ol")));