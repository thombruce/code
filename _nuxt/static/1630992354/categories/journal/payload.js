__NUXT_JSONP__("/categories/journal", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz,cA,cB,cC,cD,cE,cF,cG,cH,cI,cJ,cK,cL,cM,cN,cO,cP,cQ,cR,cS,cT,cU,cV,cW,cX,cY,cZ,c_,c$,da,db,dc,dd,de,df,dg,dh,di,dj,dk,dl,dm,dn,do0,dp,dq,dr,ds,dt,du,dv,dw,dx,dy,dz,dA,dB,dC,dD,dE){return {data:[{term:{slug:"journal",title:ad,path:"\u002Fcategories\u002Fjournal"},articles:[{slug:"monorepo-dependencies-yarn-workspaces-lerna",description:"Configuring my monorepo for easier development with Yarn Workspaces and Lerna",title:"Managing Monorepo Dependencies with Yarn Workspaces and Lerna",authors:[ah],date:"2021-09-06T20:36:44.000Z",categories:[ad],series:[ai],tags:["Yarn","Monorepo",bV],toc:[{id:bW,depth:as,text:bX}],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:a,value:bY},{type:b,tag:bZ,props:{to:b_},children:[{type:a,value:"my last post"}]},{type:a,value:", I talked about taking my three TNT projects - those being the core Vue package, plus a version packaged for Vue CLI and one for Nuxt.js - and creating, from them, a monorepo to house all three. This, I said, would make development a lot easier. It does. A caveat I didn't mention is that it could make dependency relationships harder to manage... which it, err... does, sort of. In some respects, dependencies are easy to manage between the three projects, and in other respects it is a little more difficult to have the three communicate with one another. But not to worry; that's where tools like "},{type:b,tag:F,props:{href:"https:\u002F\u002Fclassic.yarnpkg.com\u002Fen\u002Fdocs\u002Fworkspaces\u002F",rel:[I,J,K],target:L},children:[{type:a,value:"Yarn Workspaces"}]},{type:a,value:a_},{type:b,tag:F,props:{href:"https:\u002F\u002Fgithub.com\u002Flerna\u002Flerna",rel:[I,J,K],target:L},children:[{type:a,value:bV}]},{type:a,value:" come in. The first of these, Yarn Workspaces, is a way to share dependencies between the three projects as well as having each one depend on the others during development. The second, Lerna, does that same thing as well in a different way, but on top of that it also offers some version management and publishing tools."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, what's the benefit and what's the difference? Well, the main feature of both Yarn Workspaces and Lerna is multi-package dependency management. With Yarn Workspaces active, for instance, one only has to run "},{type:b,tag:g,props:{},children:[{type:a,value:bp}]},{type:a,value:" from the base directory and Yarn will iterate through all of the packages and install all of their dependencies. It installs all dependencies in the project root as well, so that the packages all share their common dependencies, significantly lowering the install time and size. And it symlinks the other packages in the workspace, so that the local, development version of each package is used in development. All of this, Lerna does as well but slightly differently. And Lerna adds the capability to run scripts across all packages, manage semantic versioning across them all, and publish all of them to the NPM registry with a single command. So then... if Lerna does the same and more, why have I chosen to use both?"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Good question. I actually did experiment with using Lerna alone, but it doesn't play nicely with Yarn's package management which I was already using. It's also had a series of developments that seem to have outpaced documentation - that is to say, it isn't poorly documented, but the documentation is somewhat incomplete and in need of some clarification. Aside from this, Yarn Workspaces is a native solution which is typically something you can depend on. It just isn't as feature rich as Lerna, so... we're lucky that Lerna has this under consideration and can be configured to work with Yarn Workspaces instead of its own dependency management solution. The resultant setup is something I absolutely adore, and am sure to use again in the future. Let's examine it..."}]},{type:a,value:f},{type:b,tag:at,props:{id:bW},children:[{type:b,tag:F,props:{href:"#the-setup",ariaHidden:Z,tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:bX}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The only "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:" configuration required to work with Yarn Workspaces is... "},{type:b,tag:B,props:{},children:[{type:a,value:"well, actually, it's this:"}]}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,a$]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:b$}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:ca}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"That's an absolute minimum. The "},{type:b,tag:g,props:{},children:[{type:a,value:"packages\u002F*"}]},{type:a,value:" glob pattern can be anything; this one just says, treat every folder inside of the packages directory as a separate package. "},{type:b,tag:B,props:{},children:[{type:a,value:"NOTE: Yes, I've also moved my project folders yet again into a "},{type:b,tag:g,props:{},children:[{type:a,value:cb}]},{type:a,value:" directory - it's a good pattern."}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Yarn Workspaces also used to require that the root package be marked private with "},{type:b,tag:g,props:{},children:[{type:a,value:"\"private\": true"}]},{type:a,value:". In fact, later docs don't suggest that this is at all deprecated, just that they've removed the requirement to make migrating to this approach a little easier for package developers. In other words, it is still best practise."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"With that in mind, I moved my various packages into the "},{type:b,tag:g,props:{},children:[{type:a,value:cb}]},{type:a,value:" directory, and I added the following to a root "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:o}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,a$]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"\"private\""}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:b$}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:ca}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"docs\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"You can see I've also added "},{type:b,tag:g,props:{},children:[{type:a,value:"docs"}]},{type:a,value:" to the workspaces patterns; I decided to keep the documentation website separate, as it isn't strictly one of the packages I'm aiming to publish."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"With that done, using Yarn Workspaces is as easy as running "},{type:b,tag:g,props:{},children:[{type:a,value:bp}]},{type:a,value:". Dependencies are then installed in the root directory and the packages depending on each other get symlinked. Easy peasy!"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Next, I installed Lerna..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add lerna --dev\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and added a basic "},{type:b,tag:g,props:{},children:[{type:a,value:cc}]},{type:a,value:" configuration file:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,a$]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"\"version\""}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"0.1.0\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"\"npmClient\""}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"yarn\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"\"useWorkspaces\""}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:Z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Typically, the "},{type:b,tag:g,props:{},children:[{type:a,value:cc}]},{type:a,value:" file would have a "},{type:b,tag:g,props:{},children:[{type:a,value:"packages"}]},{type:a,value:" value containing a similar list of globs to the one in "},{type:b,tag:g,props:{},children:[{type:a,value:cd}]},{type:a,value:" above. Since we're telling it that our "},{type:b,tag:g,props:{},children:[{type:a,value:"npmClient"}]},{type:a,value:ce},{type:b,tag:g,props:{},children:[{type:a,value:"yarn"}]},{type:a,value:" though, and that we want to "},{type:b,tag:g,props:{},children:[{type:a,value:cf}]},{type:a,value:", we can omit the packages value. Because "},{type:b,tag:g,props:{},children:[{type:a,value:cf}]},{type:a,value:ce},{type:b,tag:g,props:{},children:[{type:a,value:Z}]},{type:a,value:", Lerna will instead use the "},{type:b,tag:g,props:{},children:[{type:a,value:cd}]},{type:a,value:" array in our main "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And... Oh wow, that's really all it takes."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So I can now run commands like "},{type:b,tag:g,props:{},children:[{type:a,value:"lerna run build"}]},{type:a,value:" to run the "},{type:b,tag:g,props:{},children:[{type:a,value:cg}]},{type:a,value:" command in all packages that have that command, and "},{type:b,tag:g,props:{},children:[{type:a,value:"lerna publish"}]},{type:a,value:" them all in one go and increment their versions. Monorepo management on autopilot!"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In fact, I love this setup so much I've already started wondering if it's possible to adopt for some of my other projects. I'm sure it is. Either way, I'm gonna be adopting this structure a lot going forwards."}]}]},dir:ao,path:"\u002Fblog\u002Fmonorepo-dependencies-yarn-workspaces-lerna",extension:ap,createdAt:M,updatedAt:M},{slug:"tnt-monorepo",description:"Combining the files and histories of three separate Git repositories",title:"Creating a Monorepo for my TNT Packages",authors:[ah],date:"2021-09-04T02:20:17.000Z",categories:[ad],series:[ai],tags:["Git",aB,"Vue CLI",aC,V],toc:[],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:a,value:"Recently, I "},{type:b,tag:bZ,props:{to:"\u002Fseries\u002Freworking-tnt"},children:[{type:a,value:"reworked TNT"}]},{type:a,value:". TNT was a Nuxt module that provided a set of common dependencies and components that I use frequently across my Nuxt projects. Now, it's a Vue plugin that does the same for Vue projects that do not use Nuxt. And it's also a Vue CLI plugin, which just makes installing it a lot easier. In fact, these three things - the Nuxt module, the Vue plugin and the Vue CLI plugin - now live in three separate repositories... but they share a lot of DNA, naturally. Both the Nuxt module and the CLI plugin require TNT as a dependency. And the TNT docs, which live in the main repository, in turn require Nuxt TNT... It's "},{type:b,tag:B,props:{},children:[{type:a,value:ba}]},{type:a,value:" a circular dependency. "},{type:b,tag:B,props:{},children:[{type:a,value:"Almost."}]},{type:a,value:" Strictly the docs site is a distinct project from the main TNT one, they just live alongside one another. They didn't have to live together - that's a decision I made so that the TNT docs would live at a nice looking GitHub Pages URL... It was a vanity. But it has other benefits, we're just not yet making full utilisation of them because of the aforementioned "},{type:b,tag:B,props:{},children:[{type:a,value:ba}]},{type:a,value:" circular dependency. The docs don't directly depend on the main code, they depend on Nuxt TNT which depends on the main code in turn. So... what if I moved Nuxt TNT (and the CLI plugin) into this same repository? Then I wouldn't have to worry about this project depending on that one, which in turn depends on the first one... The "},{type:b,tag:B,props:{},children:[{type:a,value:ba}]},{type:a,value:" circular dependency would instead refer to projects in the same project tree. The "},{type:b,tag:B,props:{},children:[{type:a,value:ba}]},{type:a,value:" circle is still there, but it's neatly hidden in a branching directory structure. My code could make use of the latest changes to other projects in the directory tree, common processes could be run from the parent folder of all three, and I should no longer need to worry about bouncing back and forth between projects to "},{type:b,tag:g,props:{},children:[{type:a,value:"yarn upgrade"}]},{type:a,value:" in an "},{type:b,tag:B,props:{},children:[{type:a,value:"ALMOST"}]},{type:a,value:" circular loop to update these dependencies."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This is what's known as a "},{type:b,tag:B,props:{},children:[{type:a,value:"monorepo"}]},{type:a,value:", a singular repository housing the source code for multiple projects that share... something in common. What they share in common isn't always as cut-and-dry as my use case; for example, the repository for Ruby on Rails houses the source code for a lot of its own dependencies like Action Pack and Active Record that could, "},{type:b,tag:B,props:{},children:[{type:a,value:"strictly"}]},{type:a,value:" work independently. Vue CLI and Nuxt TNT do not work independently; it's sort of the inverse of the Rails project. Rather than Rails depending on all of these independent parts, TNT has these independent parts which depend on it."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The reason that monorepos have surged in popularity, I think, is because it makes development a lot easier. When you have these projects which depend on one another in whatever direction, and you have a team managing the development of all of them, it helps to have that all in one place. That way if an issue is identified with one project, but it's discovered that it originates somewhere else in the stack, it is trivial to address and push the common changes together."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"There are tradeoffs, of course... One small example pertaining to open source development: someone may want to fork only Nuxt TNT and make a change to one part of that for their own purposes, but now they need to fork a monorepo and... figure out how their project includes a dependency coming from that form of architecture. So monorepos can be unfriendly. It's possible we'll address this a ways down the line by making each subdirectory a Git Submodule... but this is unfriendly in its own sort of way. We just aren't going to worry about that just yet."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"For the time being, we just want to bring together TNT, Vue CLI TNT and Nuxt TNT in to one repository so that they can share code, share development, share common build tasks. And err..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"There's an easy way to do that. We just copy the files and directories from each project into their desired locations in the main project. Easy peasy..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...but we lose each project's respective Git history that way. Preferably we would be... merging the three projects into one, revision history included. So let's figure out how to do that instead, shall we?"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Ultimately, we want the resultant project to live in the same place that the core TNT library currently does (that's "},{type:b,tag:F,props:{href:ch,rel:[I,J,K],target:L},children:[{type:a,value:ch}]},{type:a,value:"), and we want it to incorporate that core library as well as Nuxt TNT and Vue CLI Plugin TNT, each in three separate directories."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In other words, the base directory - "},{type:b,tag:g,props:{},children:[{type:a,value:T}]},{type:a,value:" - is a sort of brand new space housing all three. And the three of them have their own directories - "},{type:b,tag:g,props:{},children:[{type:a,value:ci}]},{type:a,value:bq},{type:b,tag:g,props:{},children:[{type:a,value:"\u002Fnuxt"}]},{type:a,value:bq},{type:b,tag:g,props:{},children:[{type:a,value:"\u002Fcli"}]},{type:a,value:" - somehow having preserved their respective histories from the Git repositories that currently house them..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Sounds... complicated enough."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"We'll start by creating a clean project to house the three existing ones..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"mkdir tnt-monorepo\ncd tnt-monorepo\ngit init\ntouch .monorepo\ngit add .\ngit commit -m \"Initial commit\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"We also need something to be committed initially, hence the "},{type:b,tag:g,props:{},children:[{type:a,value:"touch .monorepo"}]},{type:a,value:" command. This creates an empty file for me to commit - it can be anything, but it mustn't have a name conflict with any of the files we'll be merging, so I've just called it "},{type:b,tag:g,props:{},children:[{type:a,value:".monorepo"}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now we can do our first project merge..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git remote add -f tnt https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt.git\ngit merge -s ours --no-commit tnt\u002Fmain --allow-unrelated-histories\ngit read-tree --prefix=tnt\u002F -u tnt\u002Fmain\ngit commit -m \"Merge TNT Core\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and that's the full merge. TNT's history is preserved and now lives in a "},{type:b,tag:g,props:{},children:[{type:a,value:ci}]},{type:a,value:" folder in this new Git repository. There's a little to explain here, so we'll go through it step by step."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git remote add -f tnt https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt.git\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"This adds the existing GitHub repository for TNT as a remote repository for this one. A remote is essentially... some other Git repository we want to communicate with; typically it is a remote copy of the one we're actually working on, and it is often called 'origin'. In this case it's another repository entirely. We add the "},{type:b,tag:g,props:{},children:[{type:a,value:"-f"}]},{type:a,value:" flag to tell it to fetch the Git history immediately, but we don't actually make any alterations to the state of our new monorepo at this point."}]}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git merge -s ours --no-commit tnt\u002Fmain --allow-unrelated-histories\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"This is the command that actually merges the other repository's main branch. Often "},{type:b,tag:g,props:{},children:[{type:a,value:"merge"}]},{type:a,value:" is used to... merge branches, and this is no different. The "},{type:b,tag:g,props:{},children:[{type:a,value:"-s ours"}]},{type:a,value:" flag tells it to resolve conflicts by favouring the monorepo's files (this is \"our\" project). "},{type:b,tag:g,props:{},children:[{type:a,value:"--no-commit"}]},{type:a,value:" halts the merge process before committing it, because these files are otherwise going to be merged into the root directory. And "},{type:b,tag:g,props:{},children:[{type:a,value:"--allow-unrelated-histories"}]},{type:a,value:" is important to address the fact that our repository and TNT's have very different Git histories; Git typically disallows this merge for our own safety, but we have the option to override that. Next..."}]}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git read-tree --prefix=tnt\u002F -u tnt\u002Fmain\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"This command reads the contents of the tree at "},{type:b,tag:g,props:{},children:[{type:a,value:cj}]},{type:a,value:", doing so under the given prefix and, with the "},{type:b,tag:g,props:{},children:[{type:a,value:"-u"}]},{type:a,value:" flag, updates the working tree with those contents. In other words... it moves the contents of the origin and branch at "},{type:b,tag:g,props:{},children:[{type:a,value:cj}]},{type:a,value:" into our new "},{type:b,tag:g,props:{},children:[{type:a,value:"tnt\u002F"}]},{type:a,value:" directory."}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"And finally, we complete the merge and give it a commit message:"}]}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git commit -m \"Merge TNT Core\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Got it? ... Good, because I'm not sure I do. But it works!"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now we just repeat the process for the other two repositories..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git remote add -f cli https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fvue-cli-plugin-tnt.git\ngit merge -s ours --no-commit cli\u002Fmain --allow-unrelated-histories\ngit read-tree --prefix=cli\u002F -u cli\u002Fmain\ngit commit -m \"Merge TNT CLI\"\n\ngit remote add -f nuxt https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fnuxt-tnt.git\ngit merge -s ours --no-commit nuxt\u002Fmain --allow-unrelated-histories\ngit read-tree --prefix=nuxt\u002F -u nuxt\u002Fmain\ngit commit -m \"Merge Nuxt TNT\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and just like that, we have our full monorepo. Oh, and we can delete that initial file now..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[y,n]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git rm .monorepo\ngit commit -m \"Cleanup: Delete .monorepo file\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now my monorepo only houses those three directories and their project files. And I can be confident that the three projects still work independently, since nothing has fundamentally changed here. They'll each need "},{type:b,tag:g,props:{},children:[{type:a,value:bp}]},{type:a,value:" to be ran, but they'll work. It's a working monorepo, and I believe this will let me better manage development of the whole TNT project going forwards."}]}]},dir:ao,path:b_,extension:ap,createdAt:M,updatedAt:M},{slug:"reworking-tnt-bundling",description:"Using Vue CLI to bundle my Vue plugin as a JavaScript module",title:"Reworking TNT: Addendum - Bundling the Plugin",authors:[ah],date:"2021-09-02T22:48:00.000Z",categories:[ad],series:[ai,aH],tags:[aB,aC,V,aI],toc:[],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:a,value:"So, in "},{type:b,tag:F,props:{href:ck},children:[{type:a,value:cl}]},{type:a,value:" in this series I said..."}]},{type:a,value:f},{type:b,tag:cm,props:{},children:[{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:cn}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and I drew a line under this series of posts. I said "},{type:b,tag:B,props:{},children:[{type:a,value:"hey"}]},{type:a,value:", y'know, "},{type:b,tag:B,props:{},children:[{type:a,value:"I'm done here"}]},{type:a,value:". Developers should never be hubristic... no matter how trivial the hubris."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The problem:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,"language-txt"]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"Syntax Error\nCannot use import statement outside a module\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"To be fair, it worked at the time of my writing that last post. I've since made some changes to try and integrate the new Nuxt-free TNT plugin with the existing Nuxt plugin a little better. Specifically, the failing import is the import of the plugin itself. As of writing my last post, I was benefiting from the installation of dependencies from the one package, but I wasn't actually importing the main part of the plugin itself - I was still largely depending on the Nuxt code, some of which is just duplications of the Vue code now. Naturally, I wanted to trade that out and so... now it's broken. At least, the Nuxt TNT module is broken. The plugin still does work... just not inside of the Nuxt environment. Why? Well... That's complicated."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Y'see, there's more than one way to handle an "},{type:b,tag:g,props:{},children:[{type:a,value:N}]},{type:a,value:" statement in JavaScript. There are essentially what I am going to call "},{type:b,tag:B,props:{},children:[{type:a,value:"different flavours"}]},{type:a,value:". And there are a few of them, but I want to address just two in particular: CommonJS and ES6 Modules. And I'm... not actually concerned about the differences between the two. One pre-parses and resolves sub-dependencies (ES6), the other loads and executes in order (CommonJS). This doesn't actually concern me. This may not actually be my problem, in fact. I just raise it because I... "},{type:b,tag:B,props:{},children:[{type:a,value:"could"}]},{type:a,value:" theoretically resolve the issue personally by installing one or the other, and configuring it a certain way in my own projects and "},{type:b,tag:B,props:{},children:[{type:a,value:"hey presto"}]},{type:a,value:", that should work. But that's working around the problem, avoiding the meat of it, and if others try to use my plugins and encounter the same thing, then I need to tell them to use this nasty workaround instead of my actually fixing the issue. It's just not the proper way to do things."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So... how should I actually solve this? Well, by actually bundling the plugins properly... or at least... I assume that will work."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"See, an NPM module can be bundled into separate syntaxes, each a different version of the code with slight variations for different environments and saved to files with different extensions. For instance, Vue itself comes in a standard flavour at "},{type:b,tag:g,props:{},children:[{type:a,value:"vue.js"}]},{type:a,value:" and an ES module flavour at "},{type:b,tag:g,props:{},children:[{type:a,value:"vue.esm.js"}]},{type:a,value:" - I've ran into this little difference on more than one occasion. Essentially, we want to do that. But does that mean rewriting the code twice..? Of course not. The code as it stands is functional, and doesn't need to be changed. It just needs to be interpreted by a bundling tool, with different versions spit out for these different environments. And I think the way we're going to do that is..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...by using our new friend, Vue CLI. This is going to be the easiest approach initially, though not necessarily the best. Even Vue CLI's own docs recommend a different tool for bundling plugins, "},{type:b,tag:F,props:{href:"https:\u002F\u002Frollupjs.org\u002Fguide\u002Fen\u002F",rel:[I,J,K],target:L},children:[{type:a,value:"Rollup"}]},{type:a,value:". As I'm not familiar with that tool, I want to leave it a consideration for the future. It does apparently result in smaller bundle sizes, which is great, but this isn't my main concern right now. My main concern is bundling a module at all. When I do swap out for Rollup in the future, I believe it will be easier to do so if we already have the target behaviour implemented - that way we have an exact goal to aim for."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Unfortunately, Vue CLI isn't installed in my main TNT project just yet, so I'll have to add the dependencies manually:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add core-js vue\nyarn add --dev @vue\u002Fcli-plugin-babel @vue\u002Fcli-plugin-eslint @vue\u002Fcli-service babel-eslint eslint eslint-plugin-vue vue-template-compiler\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I've also copied across the ESLint and Babel configs from a freshly created Vue CLI app. More important though are the changes I'm about to make to "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I change the location pointed to by the "},{type:b,tag:g,props:{},children:[{type:a,value:"main"}]},{type:a,value:" option and add a new "},{type:b,tag:g,props:{},children:[{type:a,value:cg}]},{type:a,value:" command to the "},{type:b,tag:g,props:{},children:[{type:a,value:"scripts"}]},{type:a,value:" object:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"main\""}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"dist\u002Ftnt.common.js\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:co}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cp}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"vue-cli-service build --target lib --name tnt .\u002Fsrc\u002Findex.js\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Then I can run:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn build\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and Vue CLI spits out a set of files including "},{type:b,tag:g,props:{},children:[{type:a,value:"tnt.umd.js"}]},{type:a,value:" to a newly created "},{type:b,tag:g,props:{},children:[{type:a,value:"dist"}]},{type:a,value:" folder."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And that's it! ... Or should be, at least. I need to now go away and test this out, see if I can "},{type:b,tag:g,props:{},children:[{type:a,value:N}]},{type:a,value:" everything correctly."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"Ugh... Yup. Yup, I can. I just have a whole new problem now."}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, that worked but it looks like I now have some kind of conflict between Nuxt's use of Vue Meta and the version of Vue Meta that I invoke for Vue projects. Not a problem..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"We'll just conditionally invoke Vue Meta based on whether or not the project is running Nuxt. I won't bother thinking about how to check for that implicitly just now; instead I'll just look for a truthy "},{type:b,tag:g,props:{},children:[{type:a,value:br}]},{type:a,value:" option in the options object:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aR}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bb}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bc}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bd}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aD]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,z,"control-flow"]},children:[{type:a,value:cq}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"!"}]},{type:a,value:"options"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:br}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and then when invoking TNT in a Nuxt project (in this case the Nuxt TNT package), we'll just set that option explicitly:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:be}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aS}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:" nuxt"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:Z}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Nice and simple, not something end users will need to worry about. Something I might do to make this a little more general purpose and configurable in the future is to swap this boolean "},{type:b,tag:g,props:{},children:[{type:a,value:br}]},{type:a,value:" option out for an object of some sort that can pick and choose features from the plugin. But this is quick and easy, and good enough for now."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"All right then... Worked myself into a little bit of a confused state here by working on a couple of projects at once, but I think I'm ready to commit. Some cleaning up to do, but other than that..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...commit and push my TNT changes, "},{type:b,tag:g,props:{},children:[{type:a,value:bs}]},{type:a,value:" from my Nuxt TNT project. And then gradually upgrade the packages wherever I use them."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"With that done, the next step really is publishing these and making sensible use of semantic versioning. But that for now is a task I leave unwritten. End of chapter."}]}]},dir:ao,path:"\u002Fblog\u002Freworking-tnt-bundling",extension:ap,createdAt:M,updatedAt:M},{slug:ck,description:"Installing dependencies, loaders and configurations with a Vue CLI Plugin",title:"Reworking TNT: Creating a Vue CLI Plugin",authors:[ah],date:"2021-08-31T04:58:30.000Z",categories:[ad],series:[ai,aH],tags:[aB,aC,V,aI],toc:[{id:cr,depth:as,text:cs},{id:ct,depth:as,text:cu},{id:cv,depth:as,text:cw}],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:b,tag:F,props:{href:cx},children:[{type:a,value:"In my previous post"}]},{type:a,value:" we tried to figure out how TNT could be installed with all those dependencies I love and use often (e.g. Pug, PostCSS, Tailwind) as part of a Webpack bundle while not strictly confining end-users to the use of Webpack. That is, it should be usable with different bundlers like Vite and Gulp as well. In doing so, we created a minimal Webpack installation and examined the parts that make my dependencies and the TNT package work. We were trying to avoid making it specific to Webpack, to avoid also making it depend upon Vue CLI, so that it could have broader use. And yet, we learned how a Vue CLI plugin communicates its intentions to bundle a Webpack package by examining the Pug Vue CLI plugin, and we discovered that this is simple, straightforward and perhaps elegant. In other words, we have taken the long way around trying to avoid creating a Vue CLI plugin in order to ultimately that that is precisely what we actually want to do. Still, it has been informative and the lessons learned can be used to document the installation of TNT without Vue CLI too."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In this post, I finally intend to finish this project by making a Vue CLI plugin for TNT that communicates its dependencies and the essential Webpack configuration that will make it work just a single line of code. By the end of this article, TNT should hopefully be as easy to install as..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"vue add tnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Let's get to it..."}]},{type:a,value:f},{type:b,tag:aT,props:{},children:[]},{type:a,value:f},{type:b,tag:at,props:{id:cr},children:[{type:b,tag:F,props:{href:"#initialising-the-plugin",ariaHidden:Z,tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:cs}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, we have a goal in sight - "},{type:b,tag:g,props:{},children:[{type:a,value:cy}]},{type:a,value:" - and we have one example of how that can be achieved - "},{type:b,tag:F,props:{href:bf,rel:[I,J,K],target:L},children:[{type:a,value:bf}]},{type:a,value:" - now we just need to get there. We'll start by looking at the docs for creating a Vue CLI plugin like that one..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Vue have a plugin development guide for Vue CLI plugins here: "},{type:b,tag:F,props:{href:cz,rel:[I,J,K],target:L},children:[{type:a,value:cz}]},{type:a,value:" I caught a glimpse of this the other day, and I'm particularly interested in something that caught my attention then: discoverability. Their section on "},{type:b,tag:F,props:{href:"https:\u002F\u002Fcli.vuejs.org\u002Fdev-guide\u002Fplugin-dev.html#naming-and-discoverability",rel:[I,J,K],target:L},children:[{type:a,value:"Naming and discoverability"}]},{type:a,value:" insists upon a naming strategy matching the form "},{type:b,tag:g,props:{},children:[{type:a,value:"vue-cli-plugin-\u003Cname\u003E"}]},{type:a,value:bt},{type:b,tag:g,props:{},children:[{type:a,value:"@scope\u002Fvue-cli-plugin-\u003Cname\u003E"}]},{type:a,value:". We know the "},{type:b,tag:g,props:{},children:[{type:a,value:"\u003Cname\u003E"}]},{type:a,value:" is going to be 'tnt', but what about the "},{type:b,tag:g,props:{},children:[{type:a,value:"@scope"}]},{type:a,value:"? The typical scope I've used is my own name - e.g. "},{type:b,tag:g,props:{},children:[{type:a,value:bu}]},{type:a,value:". I could continue to follow that pattern or make a change in this particular case... My question is: How does Vue CLI handle conflicting names? Answer... Found here: "},{type:b,tag:F,props:{href:cA,rel:[I,J,K],target:L},children:[{type:a,value:cA}]},{type:a,value:" Elsewhere in the docs, the guide makes clear the difference:"}]},{type:a,value:f},{type:b,tag:cm,props:{},children:[{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"You can also use 3rd party plugins under a specific scope. For example, if a plugin is named @foo\u002Fvue-cli-plugin-bar, you can add it with: "},{type:b,tag:g,props:{},children:[{type:a,value:"vue add @foo\u002Fbar"}]}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So it's my choice, then. Do we want "},{type:b,tag:g,props:{},children:[{type:a,value:cy}]},{type:a,value:bt},{type:b,tag:g,props:{},children:[{type:a,value:"vue add @thombruce\u002Ftnt"}]},{type:a,value:"? I'm gonna opt for scoped for the time being. Part of the reason that my other packages are scoped is... 'tnt' as the name of an NPM package was already taken by a package published 8 years ago and never updated. I'm happy with scoped, but I may change things up later. Let's create the package..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"mkdir vue-cli-plugin-tnt\ncd vue-cli-plugin-tnt\ngit init\nyarn init\n# name: @thombruce\u002Fvue-cli-plugin-tnt\n# version: 0.1.0\n# description: vue-cli plugin to add TNT with Pug, Tailwind and DaisyUI\n# entry point: index.js\n# repository url: https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fvue-cli-plugin-tnt\n# author: Thom Bruce\n# license: MIT\n# private: false\ntouch index.js\ntouch README.md\ntouch .gitignore\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"We'll leave "},{type:b,tag:g,props:{},children:[{type:a,value:bv}]},{type:a,value:" empty for just the moment, but I'm adding a little title and description to "},{type:b,tag:g,props:{},children:[{type:a,value:"README.md"}]},{type:a,value:". I've also copied across the contents of a boilerplate "},{type:b,tag:g,props:{},children:[{type:a,value:cB}]},{type:a,value:" that's good for general purposes. And then..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git add . && git commit -m \"Initial commit\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I've also created the repository on GitHub and will push my initial commit now..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git remote add origin https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fvue-cli-plugin-tnt.git\ngit push -u origin main\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The project now exists at "},{type:b,tag:F,props:{href:cC,rel:[I,J,K],target:L},children:[{type:a,value:cC}]},{type:a,value:". At present it lists none of the required dependencies, and it provides no instructions for initialising TNT. So that's our next step."}]},{type:a,value:f},{type:b,tag:at,props:{id:ct},children:[{type:b,tag:F,props:{href:"#install-dependencies",ariaHidden:Z,tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:cu}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Let's go over the dependencies we installed last time..."}]},{type:a,value:f},{type:b,tag:bg,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"webpack"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"webpack-cli"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"webpack-dev-server"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"vue-loader"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"vue-template-compiler"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"style-loader"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"css-loader"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"postcss-loader"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"html-webpack-plugin"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:cD}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Interesting list. All of these are in fact already a given, with the exception of "},{type:b,tag:g,props:{},children:[{type:a,value:cD}]},{type:a,value:". Webpack will already be installed, as will Vue and the style and CSS loaders, even the PostCSS loader is one we can take for granted."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Meanwhile, TNT itself lists the dependencies for Tailwind, DaisyUI, PostCSS, Pug, Vue Meta and Autoprefixer. We just need to include TNT as a dependency here, and provide the logic to be hooked into Webpack. So, it's just the two dependencies? Hmm... Three. We should add "},{type:b,tag:g,props:{},children:[{type:a,value:"raw-loader"}]},{type:a,value:"; the Pug Vue CLI includes it, and my own experimental project made use of it without ever declaring the dependency explicitly (it might've failed if I'd had "},{type:b,tag:g,props:{},children:[{type:a,value:cE}]},{type:a,value:" files instead of Vue Single File Components). So..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt pug-plain-loader raw-loader\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"NOTE: TNT is not yet published on NPM. Shouldn't be a problem, but we'll revisit these dependencies in the future when it should be referencable by name instead of GitHub repository URL."}]}]},{type:a,value:f},{type:b,tag:at,props:{id:cv},children:[{type:b,tag:F,props:{href:"#integration-logic",ariaHidden:Z,tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:cw}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Last thing to do then (before we work out how to publish this as discoverable by Vue CLI) is to write the Webpack logic that should chain my steps and configuration into that used by default in Vue CLI projects."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In order to install Pug, we will be copying across the contents pretty much verbatim from "},{type:b,tag:F,props:{href:cF,rel:[I,J,K],target:L},children:[{type:a,value:cF}]},{type:a,value:". That's the Vue CLI Pug plugin, and what the logic in that file does is essentially just tell Webpack how to handle "},{type:b,tag:g,props:{},children:[{type:a,value:cE}]},{type:a,value:" files when it finds them and the contents of Vue Single File Components that have "},{type:b,tag:g,props:{},children:[{type:a,value:"\u003Ctemplate lang=\"pug\"\u003E"}]},{type:a,value:" as part of their contents. We want TNT to do the same, to do "},{type:b,tag:bh,props:{},children:[{type:a,value:"exactly"}]},{type:a,value:" the same, so we're copying that."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In our plugin's "},{type:b,tag:g,props:{},children:[{type:a,value:bv}]},{type:a,value:bw}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,cG,bx,E,r,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aD]},children:[{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aU,j]},children:[{type:a,value:aV}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n  api"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"chainWebpack"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aD]},children:[{type:a,value:"webpackConfig"}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aU,j]},children:[{type:a,value:aV}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:"\u002F\u002F Remove any existing rule added from a previous version of the plugin (npm uninstall\u002F yarn remove will remove the plugin, but leave behind the webpack rules)"}]},{type:a,value:cH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"rules"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"delete"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:"\n\n    "},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:"\u002F\u002F Rules taken from: https:\u002F\u002Fvue-loader.vuejs.org\u002Fguide\u002Fpre-processors.html#pug"}]},{type:a,value:cH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:A}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:bi}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"test"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:b,tag:c,props:{className:[d,aK,aL]},children:[{type:a,value:bj}]},{type:a,value:cJ},{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:aM}]}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:cK},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:"\u002F\u002F this applies to \u003Ctemplate lang=\"pug\"\u003E in Vue components"}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:cL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'vue-loader'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"resourceQuery"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:cM}]},{type:b,tag:c,props:{className:[d,aK,aL]},children:[{type:a,value:cN}]},{type:a,value:bk}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cO}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:by}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aW}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aW}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:cK},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:"\u002F\u002F this applies to pug imports inside JavaScript, i.e. .pug files"}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:cL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'raw-pug-files'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'pug-raw'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:by}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aW}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cO}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:by}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aW}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aW}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"But we do need to add our own adaptations in order to inform the existing PostCSS installation that it should use the tailwindcss and autoprefixer plugins we're including as dependencies. And as well as this, we want to provide some default configuration to the tailwindcss plugin."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"To achieve this, I'm going to look at the existing Vue CLI Tailwind plugin by Jens Eggerstedt ("},{type:b,tag:F,props:{href:"https:\u002F\u002Fgithub.com\u002Fforsartis",rel:[I,J,K],target:L},children:[{type:a,value:"forsartis on GitHub"}]},{type:a,value:"), "},{type:b,tag:F,props:{href:"https:\u002F\u002Fgithub.com\u002Fforsartis\u002Fvue-cli-plugin-tailwind",rel:[I,J,K],target:L},children:[{type:a,value:"forsartis\u002Fvue-cli-plugin-tailwind"}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Eggerstedt's plugin includes some prompts which ask the installer if they want to create a full, minimal or no config at all for TailwindCSS. I'll be modifying this so that no prompts are asked, and my own specific TailwindCSS config gets created no matter what. Why? Well... it's going to be simplest, and for my own purposes I will generally be installing TNT any time I initialise a Vue project, so I want all of my default configuration when I do that - I want "},{type:b,tag:B,props:{},children:[{type:a,value:"conventions"}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, now we're going to write a "},{type:b,tag:g,props:{},children:[{type:a,value:"generator.js"}]},{type:a,value:" file for our plugin that installs the @thombruce\u002Ftnt dependency, injects the import and Vue.use for @thombruce\u002Ftnt into the project's "},{type:b,tag:g,props:{},children:[{type:a,value:aX}]},{type:a,value:", and creates some default configuration files. The result of my efforts is this:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,cG,bx,E,r,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aD]},children:[{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aU,j]},children:[{type:a,value:aV}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:aY}]},{type:a,value:" postcss "},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"readPostcssConfig"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:aY}]},{type:a,value:" configs "},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    dependencies"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aS}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt'"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    postcss"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n      plugins"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n        tailwindcss"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        autoprefixer"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:"\n\n  configs"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bz}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bA}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,cQ,j]},children:[{type:a,value:aQ}]},{type:a,value:cR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bz}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,cQ,j]},children:[{type:a,value:aQ}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:bA}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:cS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"extendPackage"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:cR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:cS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"onCreateComplete"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aU,j]},children:[{type:a,value:aV}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"importTNT"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:cT}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"initConfig"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"injectPurgeConfig"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"injectTailwindPlugins"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now, the file itself does have a bit more in it than that. There are several functions here, but I just want to refer to them by name for the time being. What's going on here? Well..."}]},{type:a,value:f},{type:b,tag:bB,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"The @thombruce\u002Ftnt dependency is being added."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"The PostCSS plugin configuration is being altered."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"These both happen in the "},{type:b,tag:g,props:{},children:[{type:a,value:"api.extendPackage(configs);"}]},{type:a,value:" step."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"With that done and \"onCreateComplete\", we then..."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Generate the "},{type:b,tag:g,props:{},children:[{type:a,value:N}]},{type:a,value:a_},{type:b,tag:g,props:{},children:[{type:a,value:bC}]},{type:a,value:" statements for the "},{type:b,tag:g,props:{},children:[{type:a,value:aX}]},{type:a,value:" file."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Generate a fresh TailwindCSS config with "},{type:b,tag:g,props:{},children:[{type:a,value:cT}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Inject our own PurgeCSS configuration into that config."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Inject our own plugins configuration into that config."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And that's it. In fact, it works! I've tested the installation like so..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add --dev file:\u002FUsers\u002Fthombruce\u002FDeveloper\u002Fthombruce\u002Fvue-cli-plugin-tnt\nvue invoke @thombruce\u002Ftnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Pug is working, Tailwind is working, DaisyUI is working. Seemingly... all of it is working. And importantly, we have separated out the parts that make TNT work with Vue CLI and Webpack. The main TNT package now is... actually, it's pretty bare, but it has only the operational dependencies, rather than any platform-specific ones. So it's... stack-agnostic. Fantastic!"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git add . && git commit -m \"Install and configure dependencies\"\ngit push\n# Done!\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"It isn't yet published properly, but can be installed straight from GitHub and invoked in-project with..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add --dev https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fvue-cli-plugin-tnt\nvue invoke @thombruce\u002Ftnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:cn}]}]},dir:ao,path:"\u002Fblog\u002Freworking-tnt-vue-cli",extension:ap,createdAt:M,updatedAt:M},{slug:cx,description:"Working through Webpack and other bundler conflicts and dependencies",title:"Reworking TNT: Creating a Vue Plugin - Part 2",authors:[ah],date:"2021-08-30T17:42:29.000Z",categories:[ad],series:[ai,aH],tags:[aB,aC,V,aI],toc:[{id:cU,depth:3,text:cV}],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:b,tag:F,props:{href:cW},children:[{type:a,value:"Last time"}]},{type:a,value:" we ran into a bit of a blockade trying to make my TNT plugin provide its own default configuration. The issue: Vue CLI, which we used to generate the Dynamite UI project I'm working on, obfuscates a lot of the configurability of Vue and Webpack. Under the hood, Vue CLI is using Webpack... "},{type:b,tag:B,props:{},children:[{type:a,value:bD}]},{type:a,value:". And this can be configured from the project with our own Webpack config files, I presume, but the obscurity is making it difficult to assess the relationship between the UI project and my plugin."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Today then, we're going to start from scratch and create a more barebones Vue project. This should be a minimum viable reproduction of what we ultimately want to achieve... meaning essentially we just really want two dependencies: Vue and TNT. We might find we need more, which may either need to be added to the Vue project directly or, preferably, to TNT, but the result should be a plugin that works with plain Vue projects, with Vue CLI ones and with Nuxt, because those latter two approaches build upon the first. In fact, this is what this whole \"Reworking TNT\" exercise has been about: prying TNT apart from the Nuxt logic that it previously depended on. Let's get rolling... First, we need a new project:"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Step one: Create an empty project folder and initialise Git."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"mkdir my-vue-project\ncd my-vue-project\ngit init\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"There's nothing to commit. The project is still empty."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Step two: Initialise Yarn."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn init\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This runs an interactive session. I'm not going to change any of the default values, though; this is just a throwaway project."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Step three: Install the two main dependencies - Vue and TNT - and link to our local version of TNT for development."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add vue https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\nyarn link @thombruce\u002Ftnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"One thing worth noticing is that at this point, a "},{type:b,tag:g,props:{},children:[{type:a,value:"node_modules"}]},{type:a,value:" directory will have been generated. We don't want that to be committed, so we'll add a "},{type:b,tag:g,props:{},children:[{type:a,value:cB}]},{type:a,value:" file to the root of our project with "},{type:b,tag:g,props:{},children:[{type:a,value:"node_modules\u002F"}]},{type:a,value:" in there to be ignored by Git:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"echo \"node_modules\u002F\" \u003E .gitignore\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And let's "},{type:b,tag:g,props:{},children:[{type:a,value:"git commit"}]},{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git add . && git commit -m \"Initialize project\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, Vue and TNT along with all of their child dependencies are now installed..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Next, I'm just going to copy over some files from my Dynamite UI project; specifically, "},{type:b,tag:g,props:{},children:[{type:a,value:cX}]},{type:a,value:a_},{type:b,tag:g,props:{},children:[{type:a,value:bn}]},{type:a,value:". These are the main components that tell Vue what my app looks like and how to render it; they just need some minor alterations for this more basic setup. Removal of any references to VueRouter and the Vuex Store, neither of which is installed. After that, my "},{type:b,tag:g,props:{},children:[{type:a,value:bn}]},{type:a,value:" looks like this:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:be}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:cY}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'.\u002FApp.vue'"}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aS}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"config"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"productionTip"}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:bE}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:bF}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bG]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,bx,r]},children:[{type:a,value:"render"}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aD]},children:[{type:a,value:cZ}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aU,j]},children:[{type:a,value:aV}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:cZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:cY}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:"$mount"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'#app'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I've also created a minimal "},{type:b,tag:g,props:{},children:[{type:a,value:c_}]},{type:a,value:" file in a new "},{type:b,tag:g,props:{},children:[{type:a,value:"public"}]},{type:a,value:" folder, the main part of which is that it includes this:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,bH]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bI}]},{type:a,value:k}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bJ]},children:[{type:a,value:"id"}]},{type:b,tag:c,props:{className:[d,bK]},children:[{type:b,tag:c,props:{className:[d,e,bL]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aN}]},{type:a,value:"app"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aN}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]}]},{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:c$}]},{type:a,value:k}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This is where the Vue project will ultimately be injected..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So I've got an "},{type:b,tag:g,props:{},children:[{type:a,value:"App.vue"}]},{type:a,value:" which handles how the app will be rendered, I have a "},{type:b,tag:g,props:{},children:[{type:a,value:aX}]},{type:a,value:" which tells Vue how to render and it how to behave... and I have an "},{type:b,tag:g,props:{},children:[{type:a,value:c_}]},{type:a,value:" where it should be injected but... isn't, because I still do have to do "},{type:b,tag:B,props:{},children:[{type:a,value:"the next thing"}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Vue's own documentation is pretty shy on how to handle this part; the part where Vue is packaged into the HTML template. The docs really seem to favour Vue CLI, which handles all of this automatically. For manual configuration, they link us to Webpack's documentation. Webpack isn't our only option - one can argue that a package like Gulp is simpler and more elegant, particularly for simple cases, and there's Vite too which is a new kid on the package bundling scene from the creators of Vue. For right now though, I think probably Webpack is going to give us the easiest solution thanks to its having some preconceptions, in a manner of speaking. For instance, whereas Gulp would require us to write our own bundling script, Webpack abstracts that part and has some base assumptions about web projects. Like by default, Webpack will look for a "},{type:b,tag:g,props:{},children:[{type:a,value:bM}]},{type:a,value:" and will output the result of bundling that file to "},{type:b,tag:g,props:{},children:[{type:a,value:"dist\u002Fmain.js"}]},{type:a,value:". We may need to install some custom loaders, like Vue Loader... maybe. But err... well, we'll get to that. So..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Step four: Install Webpack and other bundling necessities."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add --dev webpack webpack-cli webpack-dev-server vue-loader vue-template-compiler style-loader css-loader postcss-loader html-webpack-plugin\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"That's err... a lot of dependencies. And there's at least one missing that we might have mentioned - pug-plain-loader - but this is already being installed by TNT, so there's no need to respecify it. All of these are loaders, bundlers and plugins for Webpack's packaging of the app as a webpage. Also notable: webpack-dev-server is a package that will let us run the bundled application in development mode, just makes it a little easier to check things are working."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Right, but this needs configuring... First, let's add the build and development build scripts to "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:" for convenience:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,a$]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:co}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:cp}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"webpack --mode production\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"\"start\""}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"webpack-dev-server --mode development\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"That way I can just run "},{type:b,tag:g,props:{},children:[{type:a,value:"yarn start"}]},{type:a,value:" to run the dev server. But it still needs a Webpack configuration to reference... That's a bit more verbose."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In a new file, "},{type:b,tag:g,props:{},children:[{type:a,value:"webpack.config.js"}]},{type:a,value:", I have got:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:aY}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:da}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:db}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:aY}]},{type:a,value:" htmlWebpackPlugin "},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"html-webpack-plugin\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:aY}]},{type:a,value:" path "},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"path\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:"\n\nmodule"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n  entry"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    main"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\".\u002Fsrc\u002Fmain.js\""}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n  module"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    rules"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:b,tag:c,props:{className:[d,aK,aL]},children:[{type:a,value:bj}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:aM}]}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        loader"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:db}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:b,tag:c,props:{className:[d,aK,aL]},children:[{type:a,value:bj}]},{type:a,value:cJ},{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:aM}]}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        oneOf"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n            resourceQuery"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:cM}]},{type:b,tag:c,props:{className:[d,aK,aL]},children:[{type:a,value:cN}]},{type:a,value:bk}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:dc},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:dc},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:cP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:b,tag:c,props:{className:[d,aK,aL]},children:[{type:a,value:bj}]},{type:a,value:"css"},{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:aM}]}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n        use"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"style-loader\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"css-loader\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n            loader"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"postcss-loader\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n            options"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n              postcssOptions"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n                plugins"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:dd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"tailwindcss\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:dd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"autoprefixer\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:"\n                "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:"\n              "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:bF}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bG]},children:[{type:a,value:da}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:bF}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bG]},children:[{type:a,value:"htmlWebpackPlugin"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n      template"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:" path"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:a,value:"__dirname"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"public\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"\"index.html\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"A pretty minimal Webpack configuration, all things considered. I don't know if it's the "},{type:b,tag:bh,props:{},children:[{type:a,value:"absolute"}]},{type:a,value:" minimum for my needs, but it's minimal enough."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Apart from this, I also have a "},{type:b,tag:g,props:{},children:[{type:a,value:bo}]},{type:a,value:" file with contents:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:de},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:df},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:dg},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:a,value:aP},{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:aM}]}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    content"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'.\u002Findex.html'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'.\u002Fsrc\u002F**\u002F*.{vue,js,ts,jsx,tsx}'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n  darkMode"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:bE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:"\u002F\u002F or 'media' or 'class'"}]},{type:a,value:"\n  theme"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:dh},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n  variants"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:dh},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bO}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:di}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"These contents could in fact be inserted into the Webpack config file instead, in the empty object at "},{type:b,tag:g,props:{},children:[{type:a,value:"[\"tailwindcss\", {}],"}]},{type:a,value:"... I could in fact also separate out the PostCSS config from Webpack into a "},{type:b,tag:g,props:{},children:[{type:a,value:dj}]},{type:a,value:" file, which includes that declaration. In fact..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"That could be the answer to my problem."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"See, I already know that Tailwind's config file location can be customised by setting its path explicitly in the PostCSS config: "},{type:b,tag:F,props:{href:dk,rel:[I,J,K],target:L},children:[{type:a,value:dk}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I can also change the path to the default PostCSS config file by passing the option to the PostCSS loader: "},{type:b,tag:F,props:{href:dl,rel:[I,J,K],target:L},children:[{type:a,value:dl}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The combination of these two options should enable me to specify that my PostCSS config and my Tailwind config live in my TNT plugin's folder... right? Obviously."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And because the config files are JavaScript, I should be able to have them (or some other part of the stack) communicate that "},{type:b,tag:bh,props:{},children:[{type:a,value:cq}]},{type:a,value:" a config file does exist in the root project directory, "},{type:b,tag:bh,props:{},children:[{type:a,value:"then"}]},{type:a,value:" do use that instead. That way, an end user would only have to install the essential dependencies, then reference our PostCSS config file, and things would... work seamlessly."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Is that the best approach? Probably not..."}]},{type:a,value:f},{type:b,tag:aT,props:{},children:[]},{type:a,value:f},{type:b,tag:"h3",props:{id:cU},children:[{type:b,tag:F,props:{href:"#quick-aside",ariaHidden:Z,tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:cV}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I mentioned pug-plain-loader specifically up above. Is this strictly a dependency of TNT or is it one that should be moved into the inheriting projects? I sort of just install it out of habit every time I install Pug. Strictly though, it is a Webpack dependency... meaning that if an inheriting project used Vite or Gulp or some other process to package things, it wouldn't be essential. So then..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn remove pug-plain-loader\ngit add . && git commit -m \"Remove pug-plain-loader\"\ngit push\ncd ..\u002Fmy-vue-project\nyarn upgrade @thombruce\u002Ftnt --latest\nyarn add --dev pug-plain-loader\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I also need to "},{type:b,tag:g,props:{},children:[{type:a,value:bs}]},{type:a,value:" over on Dynamite UI and "},{type:b,tag:g,props:{},children:[{type:a,value:"yarn add --dev pug-plain-loader"}]},{type:a,value:" so that that continues to work as well. I don't need to modify any Webpack business there, because it seems Vue CLI still picks up on the use of Pug automatically... however I could instead use the "},{type:b,tag:g,props:{},children:[{type:a,value:dm}]},{type:a,value:" option to install Pug via Vue CLI template."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In fact looking at the package for vue-cli-plugin-pug at "},{type:b,tag:F,props:{href:bf,rel:[I,J,K],target:L},children:[{type:a,value:bf}]},{type:a,value:"... There isn't a great deal going on there. Just a "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:" file with pug, pug-plain-loader and raw-loader dependencies and an "},{type:b,tag:g,props:{},children:[{type:a,value:bv}]},{type:a,value:" which chains into the Webpack setup. So hold up just a second! Could I create a \"vue-cli-plugin-tnt\" that does the same? That, for example, includes all of the Webpack and loader dependencies I would want and chains into the Webpack process to configure those? Answer..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Yes, I absolutely could do that for Vue CLI projects. It would list TNT as a dependency, configure it automatically, and we'd be rolling..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So then... we should absolutely keep TNT Core, let's call it, as barebones as possible. Make no assumptions that the end user will be using Webpack or some other bundler, or Vue CLI or Nuxt, and instead maintain separate dependencies which specifically install it for Vue CLI and Nuxt, and... for plain Vue? We can aim to document the far more involved setup that includes a heap of extra dependencies... at least for the time being. In future, we can add a production-ready build, maybe. Will have to look into that."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The thing is... I don't want this to be a big, unproductive diversion. The main thing I want is for TNT to be compatible with the toolings I will be using specifically, meaning just Nuxt and Vue CLI for the time being."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So then..."}]},{type:a,value:f},{type:b,tag:aT,props:{},children:[]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"We will have to consider better approaches for installation on a plain Vue project at some other time. For our purposes now, though, TNT has been stripped of all Nuxt-specific dependencies and of Vue CLI specific ones."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I'm already maintaining a nuxt-tnt package that does not yet depend on this alternate version of TNT, but will eventually."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The last thing to do as of right now is to create an additional project that bundles TNT as a Vue CLI dependency. In the next post, we'll do just that..."}]}]},dir:ao,path:"\u002Fblog\u002Freworking-tnt-vue-plugin-part-2",extension:ap,createdAt:M,updatedAt:M},{slug:cW,description:"Moving Vue Meta and Tailwind CSS into my TNT Vue plugin",title:"Reworking TNT: Creating a Vue Plugin - Part 1",authors:[ah],date:"2021-08-29T15:18:52.000Z",categories:[ad],series:[ai,aH],tags:[aB,aC,V,aI],toc:[],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:b,tag:F,props:{href:dn},children:[{type:a,value:"When we left off"}]},{type:a,value:" I had added the dependency for Vue Meta to TNT and had installed and configured it in Dynamite UI. This was a problem, as preferably TNT would install its own dependencies without any extra configuration being required. So that's what we'll do today, and in doing so we will make TNT a sort-of \"proper\" Vue plugin. Let's look at how Vue Meta is initialised as an example:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aR}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This is what we placed in Dynamite UI's "},{type:b,tag:g,props:{},children:[{type:a,value:aX}]},{type:a,value:". It installs Vue Meta as a Vue plugin. And this is something we want TNT to do instead. Meaning that actually that exact code should live somewhere in the TNT project, and Dynamite UI should instead feature:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aS}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and to achieve that, TNT needs to export an "},{type:b,tag:g,props:{},children:[{type:a,value:"install()"}]},{type:a,value:" function. This is all well documented in the Vue docs: "},{type:b,tag:F,props:{href:do0,rel:[I,J,K],target:L},children:[{type:a,value:do0}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Anyway, my install function is going to live in a new file in my TNT project at "},{type:b,tag:g,props:{},children:[{type:a,value:bM}]},{type:a,value:o}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd tnt\ntouch src\u002Findex.js\n"}]}]}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aR}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bb}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bc}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bd}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aD]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"When any project installing TNT includes "},{type:b,tag:g,props:{},children:[{type:a,value:bC}]},{type:a,value:" now, it should run everything inside of the "},{type:b,tag:g,props:{},children:[{type:a,value:bd}]},{type:a,value:" funtion. In this case, just "},{type:b,tag:g,props:{},children:[{type:a,value:"Vue.use(VueMeta)"}]},{type:a,value:" for now. Let's see if that's worked:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Then in "},{type:b,tag:g,props:{},children:[{type:a,value:bn}]},{type:a,value:", I replace my old Vue Meta imports with TNT:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:be}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aS}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:V}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And see if it runs..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn serve\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Ah-ha, problem... Unusual problem. Dynamite UI has ESLint installed and is complaining that it can't find an ESLint configuration for the files "},{type:b,tag:g,props:{},children:[{type:a,value:"..\u002Ftnt\u002Fsrc\u002Findex.js"}]},{type:a,value:o}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"Syntax Error: Error: No ESLint configuration found in \u002FUsers\u002Fthombruce\u002FDeveloper\u002Ftnt\u002Fsrc\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I expect this is a problem with "},{type:b,tag:g,props:{},children:[{type:a,value:bP}]},{type:a,value:" linked packages and wouldn't occur for a more typical installation (indeed it hasn't cropped up for other dependencies). Fortunately, there's an easy solution. In my Dynamite UI project, I just need to add to "},{type:b,tag:g,props:{},children:[{type:a,value:"vue.config.js"}]},{type:a,value:o}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n  configureWebpack"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    resolve"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:" symlinks"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:bE}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"If I now try to "},{type:b,tag:g,props:{},children:[{type:a,value:bQ}]},{type:a,value:" again..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Success! Vue Meta is successfully being installed as a sort of sub-plugin of TNT. Perfect. But the configuration is still being handled by Dynamite UI..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"That's not strictly a problem. In the absence of the "},{type:b,tag:g,props:{},children:[{type:a,value:aP}]},{type:a,value:" attribute configured on my main Vue component, Daisy UI simply falls back to default theme behaviour. This is, in fact, preferable to a default configuration of my own as I believe it adjusts based on light\u002Fdark theme settings on the host machine. Let's move onto TailwindCSS config..."}]},{type:a,value:f},{type:b,tag:aT,props:{},children:[]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"There's quite a lot more going on to configure TailwindCSS in Dynamit UI. We have a "},{type:b,tag:g,props:{},children:[{type:a,value:bo}]},{type:a,value:" file and we need to manually "},{type:b,tag:g,props:{},children:[{type:a,value:"import '.\u002Findex.css'"}]},{type:a,value:" in "},{type:b,tag:g,props:{},children:[{type:a,value:aX}]},{type:a,value:". But these items don't yet diverge from what I would like TNT to provide as default behaviour. Ergo, TNT should handle these configurations and imports if possible."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The second part is easy. I'm just going to recreate the CSS file in my TNT project at "},{type:b,tag:g,props:{},children:[{type:a,value:"src\u002Fassets\u002Findex.css"}]},{type:a,value:o}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,"language-css"]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,bR]},children:[{type:b,tag:c,props:{className:[d,bi]},children:[{type:a,value:bS}]},{type:a,value:" base"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,bR]},children:[{type:b,tag:c,props:{className:[d,bi]},children:[{type:a,value:bS}]},{type:a,value:" components"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,bR]},children:[{type:b,tag:c,props:{className:[d,bi]},children:[{type:a,value:bS}]},{type:a,value:" utilities"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:$}]}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"...and import it from TNT's "},{type:b,tag:g,props:{},children:[{type:a,value:bM}]},{type:a,value:bw}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aR}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'.\u002Fassets\u002Findex.css'"}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bb}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bc}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:bd}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,aD]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Easy peasy! I can delete the references to this CSS file from the host project, Dynamite UI, and it's still working as intended. Perfect!"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"But the actual configuration of Tailwind is a little more difficult..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The question is: How does Tailwind know that it's installed? It's a better question than it sounds like. We've just discussed how TNT and Vue Meta are each acknowledged by the Vue app, but how does Vue know about Tailwind? Well..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"As well as a "},{type:b,tag:g,props:{},children:[{type:a,value:bo}]},{type:a,value:" file, my project also features a "},{type:b,tag:g,props:{},children:[{type:a,value:dj}]},{type:a,value:" file with the contents:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    tailwindcss"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    autoprefixer"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I believe we've discussed PostCSS previously - we had some version trouble. PostCSS is apparently part of the default Vue configuration, so Vue behind the scenes knows to look for this configuration file, and PostCSS in turn knows to look for these listed plugins. This, I believe, is all down to a hidden Webpack configuration. Webpack is a great tool, handles the packaging of... web things. Doesn't matter; point is it's doing this behind the scenes because of Vue CLI, which is the way that I generated this project. Vue CLI is cleverer than plain Vue - it brings along a lot of preconfigured conventions... a lot like Nuxt... so... a lot like what we've been trying to avoid. Thing is... my project should be installable in a Vue CLI project, in a Nuxt one, or just in a plain old Vue one. And I think understanding the configuration of a plain old Vue one would inform decisions made for Vue CLI and for Nuxt. We in fact already have a separate repo for Nuxt installations - might we also consider one for Vue CLI? They will, "},{type:b,tag:B,props:{},children:[{type:a,value:bD}]},{type:a,value:" be incompatible with one another, but that's all the more reason to have a base project that works a certain way with just plain old Vue."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"All of that is to say, I have made a mistake. Dynamite UI was generated with Vue CLI, but I need to take a step backwards, go another layer up the abstraction ladder and consider how a very simple Vue project would install this package..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In other words... I'm going to call this entry right here and we'll begin a fresh project in the next one."}]}]},dir:ao,path:"\u002Fblog\u002Freworking-tnt-vue-plugin-part-1",extension:ap,createdAt:M,updatedAt:M},{slug:dn,description:"Adding Vue Meta to my TNT Vue.js plugin",title:"Reworking TNT: Vue Meta",authors:[ah],date:"2021-08-28T00:59:19.000Z",categories:[ad],series:[ai,aH],tags:[aB,aC,V,aI],toc:[],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:a,value:bY},{type:b,tag:F,props:{href:dp},children:[{type:a,value:cl}]},{type:a,value:", I added a little data attribute directly to the HTML tag on my new project, Dynamite UI. This is something that I said I would ideally address in the future - a configuration that, actually, should be handled by the TNT plugin. Well... I'm back and I have the solution. It occurred to me while doing something else entirely, actually: there was nothing special about the way it worked with the Nuxt module, it was just "},{type:b,tag:F,props:{href:"https:\u002F\u002Fvue-meta.nuxtjs.org\u002F",rel:[I,J,K],target:L},children:[{type:a,value:"Vue Meta"}]},{type:a,value:". I had thought it was something I'd added to my Nuxt config, which it was, but it was a configuration option that gets passed along to Vue Meta. So, what is Vue Meta?"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Vue Meta is actually developed by the people behind Nuxt... at least, I think it is. It's official site is a subdomain of nuxtjs.org. It's a plugin that enables the addition of tags and meta attributes to the HTML document's "},{type:b,tag:g,props:{},children:[{type:a,value:"\u003Chead\u003E"}]},{type:a,value:" tag. This is typically off limits to Vue components, but Vue Meta makes it possible to define and overwrite attributes directly from Vue components. And for my purposes right now, it also exposes a "},{type:b,tag:g,props:{},children:[{type:a,value:"htmlAttrs"}]},{type:a,value:" object for defining attributes for the "},{type:b,tag:g,props:{},children:[{type:a,value:bT}]},{type:a,value:" tag itself. That's all I need to avoid having to directly write my DaisyUI theme data attribute into the HTML template in all of my Vue projects - I can move it now into a configuration option. Let's install..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd tnt\nyarn add vue-meta\ngit add . && git commit -m \"Install vue-meta\"\ngit push\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Unfortunately, I'm still not ready to configure features in the TNT Vue plugin, so I'll need to do that over on Dynamite UI..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I need to tell Vue to import and use it in my "},{type:b,tag:g,props:{},children:[{type:a,value:bn}]},{type:a,value:bw}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:be}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:N}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,ae]},children:[{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:W}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aR}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,E,r,x]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"When TNT is a proper Vue plugin, it will actually export a Vue install method and we will instead write something like "},{type:b,tag:g,props:{},children:[{type:a,value:bC}]},{type:a,value:". This then would include the code above, so that telling Vue to \"use\" TNT, it follows that TNT tells Vue to also \"use\" Vue Meta. We'll try to document that when we revisit and do convert this into a proper plugin. For now, Vue Meta is packaged by TNT but installed manually in the projects using TNT."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"At this point, though, I should be able to... Remove "},{type:b,tag:g,props:{},children:[{type:a,value:"data-theme=\"cupcake\""}]},{type:a,value:" from the "},{type:b,tag:g,props:{},children:[{type:a,value:bT}]},{type:a,value:" tag in "},{type:b,tag:g,props:{},children:[{type:a,value:dq}]},{type:a,value:dr}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Instead, add the attribute to... I guess "},{type:b,tag:g,props:{},children:[{type:a,value:cX}]},{type:a,value:" for now:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,bH]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bI}]},{type:a,value:bU}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]}]},{type:b,tag:c,props:{className:[d,bU]},children:[{type:b,tag:c,props:{className:[d,"language-javascript"]},children:[{type:a,value:f},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bb}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,z,A]},children:[{type:a,value:bc}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n  metaInfo"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:"\n    htmlAttrs"},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'data-theme'"}]},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"'cupcake'"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]},{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:c$}]},{type:a,value:bU}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And when I now "},{type:b,tag:g,props:{},children:[{type:a,value:bQ}]},{type:a,value:"... Success! The DaisyUI 'Cupcake' theme is still being used, now courtesy of Vue Meta. Even better, this little exercise has made it a clearer how I go about turning TNT into a proper Vue plugin. That still to come, next time..."}]}]},dir:ao,path:"\u002Fblog\u002Freworking-tnt-vue-meta",extension:ap,createdAt:M,updatedAt:M},{slug:dp,description:"Reconfiguring my Nuxt template module so that it also works with Vue.js",title:"Reworking TNT: Thom's Nuxt Template without Nuxt",authors:[ah],date:"2021-08-26T22:36:35.000Z",categories:[ad],series:[ai,aH],tags:[aB,aC,V,aI],toc:[{id:ds,depth:as,text:dt}],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:a,value:"If you don't already know, TNT is a work in progress Nuxt module I've been working on to simplify the setup of my Nuxt projects. It comes with TailwindCSS and DaisyUI, each with some pre-configurations so that things like theme-switching and CSS purging work. It also comes with the Nuxt Font Awesome module, my own Nuxt Taxonomies project, Lodash, Luxon and Pug... and it insists that Nuxt Content should be a peer dependency (meaning it doesn't install it itself, but your project would be expected to have it installed separately). So a lot of that is Nuxt-specific, but I would like to use Pug, Luxon, Lodash and Tailwind as common dependencies of my Vue projects too. And I would like many of the components I've written or will write for TNT to be available to Vue.js projects as well. What does this mean? Well... I'm going to have to do some rewriting. Ideally, I don't want to be maintaining two wholly distinct libraries to roughly do the same thing for two frameworks, particularly while the frameworks are very closely related. Instead... I either want one library that can be installed in projects of either framework, or I want my Nuxt-specific library to inherit from the Vue one, given that Nuxt is really just an extension of Vue. That's easier said than done. Like I said, this little library is heavily dependent on Nuxt at the moment. And it's possible we'll lose some of the desirable features of those Nuxt versions of libraries by replacing them with either packages made for just Vue instead, or general-purpose ones intended for any NPM-managed project. We'll have to ask the questions: What am I losing by replacing Nuxt Tailwind with just TailwindCSS? What am I losing by replacing Nuxt Font Awesome with Vue Font Awesome or with just Font Awesome? How do we reconcile the inclusion of Nuxt Taxonomies in Vue projects it's completely irrelevant to? If those losses are undesirable or even impermissible, what is the best approach to separate out Nuxt dependencies whilst keeping the core part of TNT's development in one place?"}]},{type:a,value:f},{type:b,tag:at,props:{id:ds},children:[{type:b,tag:F,props:{href:"#creating-dynamite",ariaHidden:Z,tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:dt}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, one small part of the reason I started TNT is that I thought such a template could ultimately be useful for creating websites for clients. It currently features two distinct styles of layout and, thanks to DaisyUI, more than a dozen themes. It's intended to be versatile, then. It's also intended to permit me to stop overthinking decisions about UI frameworks and CSS libraries. TailwindCSS makes every component very customisable, while DaisyUI provides a solid foundation for making those customisations. TNT, I thought, would be a strong starting point for any of my projects, whether it be a simple blogging website or a rich application dashboard. And honestly it's well on its way. But it's Nuxt dependent, and not all of my Vue projects will be Nuxt ones. At least I never intended for that to be the case, and now that I've reviewed how I might integrate a Vue or Nuxt frontend with a Rails backend... I don't think it can be. So, I need a new Vue project to play around with. For that, I'm going to make a start on Dynamite CMS, a sort of cousing to my TNT project - it's a content management system intended to work in particular with content websites created using TNT. We'll see if that intention remains the same as the project progresses, for now I just need a simple Vue application where I can play with my TNT template library. Let's create that..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"vue create dynamite-ui\ncd dynamite-ui\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The "},{type:b,tag:g,props:{},children:[{type:a,value:bk}]},{type:a,value:" command depends on Vue CLI being installed and runs an interactive menu allowing me to choose various options. Most of these aren't relevant to the discussion, except that I am specifically "},{type:b,tag:B,props:{},children:[{type:a,value:"not"}]},{type:a,value:" initialising the project with a CSS pre-processor. The project will be using TailwindCSS, PostCSS and - I think - PurgeCSS, which can't be installed that way. Plus, they will be part of TNT, not the parent project."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Here's what I'm thinking comes next..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add --dev https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This will install TNT, which I know I've said will be incompatible with Vue... but I don't really know just "},{type:b,tag:B,props:{},children:[{type:a,value:"how incompatible"}]},{type:a,value:" it will be. Maybe this way I can get a sense of what works, what doesn't, and what I need to change."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Predictably after running that command, there are a lot of things installed that I do not want. So I'm gonna jump on over to TNT..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Ftnt\ngit co -b vue\ngit push --set-upstream origin vue\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I've also checked out a brand new branch called 'vue' and set the upstream branch on GitHub to this new branch. Not exactly what that means, but if you're unfamiliar with Git or version control at all... essentially now I can make as many modifications as I want without losing the previous state, which is saved as a separate branch on GitHub. Used properly, you always maintain a detailed history with version control meaning you can reset the project at any time to any previous point in time. It also facilitates collaboration, testing, etc. If you're a developer not using version control, start."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"What next? Now I need to do what I just said and butcher TNT a little. Remove all the Nuxt dependencies and replace them with Vue or non-framework-specific ones."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The main script aside, the TNT project essentially consists of four folders: assets, components, layouts and plugins. Of these, assets and plugins should have no problems. We can incorporate their contents into a Vue project with relative ease. In my components and layouts folders, however... well, let's ignore layouts for now - it actually is Nuxt specific. The components folder, however, has several instances of "},{type:b,tag:g,props:{},children:[{type:a,value:du}]},{type:a,value:" and the "},{type:b,tag:g,props:{},children:[{type:a,value:dv}]},{type:a,value:" component being used. We can ignore the instances of the "},{type:b,tag:g,props:{},children:[{type:a,value:dv}]},{type:a,value:" component, as these are layout-specific, but those NuxtLinks do need to be addressed before the same components will work in Vue. That part's easy; for the most part, "},{type:b,tag:g,props:{},children:[{type:a,value:du}]},{type:a,value:" just becomes "},{type:b,tag:g,props:{},children:[{type:a,value:"RouterLink"}]},{type:a,value:"... "},{type:b,tag:B,props:{},children:[{type:a,value:"I think that still works in Nuxt..."}]},{type:a,value:" But actually there are a lot of other problems with these components: uses of the "},{type:b,tag:g,props:{},children:[{type:a,value:"fetch()"}]},{type:a,value:" hook, uses of Nuxt Content, Nuxt Taxonomies and some Nuxt variables. I don't want to sacrifice some of that, so I've made a decision..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"There will at least be two directories (probably two separate libraries). One for Vue components, and one for Nuxt components. The Nuxt components will use, inherit from and extend the Vue ones with Nuxt functionality. The Vue ones will be more general purpose, unable to utilise some of Nuxt's features."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So we probably want to start a new project entirely. TNT should be general purpose, working for both Vue and Nuxt; a separate project, "},{type:b,tag:B,props:{},children:[{type:a,value:"Nuxt TNT"}]},{type:a,value:", should expand upon it. "},{type:b,tag:B,props:{},children:[{type:a,value:"Decision made!"}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I've moved "},{type:b,tag:g,props:{},children:[{type:a,value:bu}]},{type:a,value:" to "},{type:b,tag:g,props:{},children:[{type:a,value:"@thombruce\u002Fnuxt-tnt"}]},{type:a,value:" and have started a brand new project in the old namespace. The docs remain in the "},{type:b,tag:g,props:{},children:[{type:a,value:bu}]},{type:a,value:" repo, but other than that it is barebones at the moment. Time to start migrating some components and picking out our dependencies. I won't worry for now about having Nuxt TNT inherit from the new project - that can be left as an exercise for later. For now, I'm simply aiming to get some of that TNT goodness to work for Vue projects not using Nuxt."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"After some messing around, I have a clean TNT repository with no code. But it's pushed to GitHub, so jumping back across to my new Dynamite UI project, I can install this empty package..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn remove @thombruce\u002Ftnt\nyarn cache clean # To clean up any references to the old version and its Git history\nyarn add https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I've removed the old and installed the new. Now I want to be able to actively develop this and see the results on my own machine without having to push the dependency. Fortunately, there's "},{type:b,tag:g,props:{},children:[{type:a,value:bP}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn link\ncd ..\u002Fdynamite-ui\nyarn link @thombruce\u002Ftnt\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now, Dynamite UI will use the local, linked version of TNT in development on my machine, so any changes I make will be applied almost immediately (definitely immediately if I have Hot Module Replacement up and running). Time to start actually adding dependencies and components to this thing!"}]},{type:a,value:f},{type:b,tag:aT,props:{},children:[]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The first dependency I want to install is Pug. I don't know how easy this is going to be though. Usually I can just "},{type:b,tag:g,props:{},children:[{type:a,value:dm}]},{type:a,value:" and depend on Vue CLI's implementation, but as I'm working on a plugin I think I'll take my old approach..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn add pug pug-plain-loader\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now, that's - I think - all that's required to get Pug working in the TNT plugin. Unfortunately I don't know if the new dependency will be installed over on Dynamite UI as a linked module... I may need to push TNT and "},{type:b,tag:g,props:{},children:[{type:a,value:bs}]},{type:a,value:". "},{type:b,tag:g,props:{},children:[{type:a,value:bP}]},{type:a,value:" was maybe not made for managing nested dependencies - it wasn't. But if I do remember rightly, Vue should have no problem with just the addition of pug and pug-plain-loader to dependencies. I think Webpack detects their presence, and so no additional config will be needed... at least once I do get this properly installed over on Dynamite UI. But since I need to push and then upgrade, I may as well get a few other dependencies installed too. I certainly want..."}]},{type:a,value:f},{type:b,tag:bg,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Pug"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"TailwindCSS"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"TailwindCSS Forms"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"DaisyUI"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Theme Change"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"PostCSS (though I think this is already installed)"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Lodash"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Luxon"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"That's all of the dependencies from Nuxt TNT except the icon libraries and those that are Nuxt-specific. "},{type:b,tag:B,props:{},children:[{type:a,value:"We'll revisit icon libraries later."}]},{type:a,value:" Fortunately the only dependency listed above that I was using a Nuxt-specific version of is TailwindCSS; all others are general purpose. So picking the packages to install is pretty easy..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The TailwindCSS docs suggest an install command of "},{type:b,tag:g,props:{},children:[{type:a,value:"npm install -D tailwindcss@latest postcss@latest autoprefixer@latest"}]},{type:a,value:", which includes PostCSS (we believe already installed) and Autoprefixer, which we definitely want too, so... they join the installation:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn add tailwindcss@latest postcss@latest autoprefixer@latest @tailwindcss\u002Fforms daisyui lodash luxon theme-change\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And since we need to push the project to upgrade it over on Dynamite UI..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git add .\ngit commit -m \"Install dependencies\"\ngit push\ncd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Checking the Yarn lockfile over on Dynamite UI, I can confirm that my dependencies are properly installed. To be doubly sure that at least Pug is working, I've modified the default app template of Dynamite UI to express itself in Pug format and I'm running "},{type:b,tag:g,props:{},children:[{type:a,value:bQ}]},{type:a,value:"... Navigating to localhost:8080 in my browser... Yup, that appears to be working!"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"I'm also confident that Lodash, Luxon and Theme Change are all installed fine, as I will be importing these directly for the most part and don't need global access to them. They're installed, so they're installed successfully."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"TailwindCSS, PostCSS, Autoprefixer, TailwindCSS Forms and DaisyUI... Those need more configuration, and that's not easy or immediately apparent how to achieve. With Nuxt, I benefited from a bunch of build hooks that I could tap into to: 1. Configure the installation in the TNT package itself, and 2. Allow for this configuration to be overwritten per project."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"It's been a little while since I made a proper Vue plugin, so I don't know what options are available to me. For the time being, I think I'm going to configure TailwindCSS directly in the Dynamite UI project... That way I can get a feel for what sort of configuration needs to made and what I need to be able to overwrite."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"# Still in dynamite-ui\nnpx tailwindcss init -p\ngit add . && git commit -m \"Tailwind: npx tailwindcss init -p\"\n# Modify Tailwind config to enable PurgeCSS\ngit add . && git commit -m \"Tailwind: Configure PurgeCSS\"\n# Configure Tailwind CSS\ngit add . && git commit -m \"Tailwind: Configure default CSS\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"These are the steps detailed at "},{type:b,tag:F,props:{href:dw,rel:[I,J,K],target:L},children:[{type:a,value:dw}]},{type:a,value:". I've also committed each step so that I will be able to review my git history and see these changes specifically, and in order."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"TailwindCSS Forms is also very easy to add. Just require it from the plugins section in "},{type:b,tag:g,props:{},children:[{type:a,value:bo}]},{type:a,value:dr}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bO}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Done. Don't forget to commit the change:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"# Add TailwindCSS forms as a Tailwind plugin\ngit add . && git commit -m \"Tailwind: Add Tailwind Forms plugin\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"DaisyUI and and Theme Change are a little more involved. In fact... I never fully got Theme Change working properly with the Nuxt package, though it was close enough - it changed themes, but it didn't successfully load the correct theme on subsequent visits. That's an issue I'll address in the future."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"DaisyUI itself is easy enough to add. Like TailwindCSS Forms, all we need to do is require it as a plugin in our Tailwind config. We'll also safelist the data-theme attribute here so that DaisyUI's themes aren't purged by PurgeCSS:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,O]},children:[{type:b,tag:g,props:{},children:[{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:av}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:Q}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:de},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:df},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:dg},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,aw]},children:[{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,ax,ay]},children:[{type:a,value:aP},{type:b,tag:c,props:{className:[d,az,r]},children:[{type:a,value:aM}]}]},{type:b,tag:c,props:{className:[d,U]},children:[{type:a,value:T}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:aZ},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:o}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:R}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bO}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:di}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:D},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aq}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Generally, I think it's supposed to be a good idea to require DaisyUI last... The DaisyUI docs say nothing about TailwindCSS Forms, but they do suggest that if we were using TailwindCSS Typography (a plugin for applying typographic styles to content over which we have little markup control) then it should be required after that because it extends some of its styles. We'll just roll with the assumption that DaisyUI should come last unless otherwise specified."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"We also need to add that "},{type:b,tag:g,props:{},children:[{type:a,value:aP}]},{type:a,value:" attribute to our HTML tag in "},{type:b,tag:g,props:{},children:[{type:a,value:dq}]},{type:a,value:". There has to be a better way to do this, but for now we'll do this the easy way:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,bH]},children:[{type:b,tag:g,props:{},children:[{type:b,tag:c,props:{className:[d,"doctype"]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"\u003C!"}]},{type:b,tag:c,props:{className:[d,"doctype-tag"]},children:[{type:a,value:"DOCTYPE"}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,"name"]},children:[{type:a,value:dx}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,ag]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:bI}]},{type:a,value:dx}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bJ]},children:[{type:a,value:"lang"}]},{type:b,tag:c,props:{className:[d,bK]},children:[{type:b,tag:c,props:{className:[d,e,bL]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aN}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aN}]}]},{type:a,value:i},{type:b,tag:c,props:{className:[d,bJ]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,bK]},children:[{type:b,tag:c,props:{className:[d,e,bL]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aN}]},{type:a,value:"cupcake"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aN}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Let's commit all of that..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"git add . && git commit -m \"Tailwind: Add DaisyUI plugin\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now, the issue is Theme Change... I'm actually going to double-back and remove Theme Change for now:"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn remove theme-change\ngit add . && git commit -m \"Uninstall theme-change\"\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Why do that? Because actually adding "},{type:b,tag:g,props:{},children:[{type:a,value:aP}]},{type:a,value:" directly to the "},{type:b,tag:g,props:{},children:[{type:a,value:bT}]},{type:a,value:" tag above is a mess-enough for the time being, and because being able to change the theme on the fly isn't critical to my development. There are things I want to manage before we reach that point."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"But where are we at now?"}]},{type:a,value:f},{type:b,tag:bg,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"TailwindCSS and DaisyUI should each be properly installed"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Pug we already know is working"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Lodash and Luxon are safely assumed to be ready to use"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This puts me in position to start adding my own templates and components! For the time being, we'll grant that many of the steps above are required to get the TNT plugin working - we'll refine that in the future. The last thing to do at this stage is to create a layout and a component using Tailwind and DaisyUI; and if that works, we've completed this setup."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"One quick copying over of one of my TNT layouts and... Error!"}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"Error: PostCSS plugin tailwindcss requires PostCSS 8.\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Not to worry, I've seen this before. In fact, it's an issue that the Tailwind team are aware of an provide a solution to: "},{type:b,tag:F,props:{href:dy,rel:[I,J,K],target:L},children:[{type:a,value:dy}]},{type:a,value:" So then..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"yarn remove tailwindcss postcss autoprefixer\nyarn add tailwindcss@npm:@tailwindcss\u002Fpostcss7-compat postcss@^7 autoprefixer@^9\ngit add . && git commit -m \"Use TailwindCSS Compatibility version\"\ngit push\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This swaps out the latest version of Tailwind for a compatibility version, the same in every way apparently apart from that it maintains compatibility with older versions of PostCSS."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Let's jump back across to DynamiteUI..."}]},{type:a,value:f},{type:b,tag:k,props:{className:[l]},children:[{type:b,tag:m,props:{className:[n,y]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\nyarn serve\n"}]}]}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Success! TailwindCSS is now working, DaisyUI and the chosen theme as well, my custom layout..."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Now, it isn't ideal. A lot has been done on DynamiteUI that I'd rather be done in the TNT plugin, but this is a start. It's a lot easier to migrate that functionality up the stream so to speak into TNT than it is to fiddle endlessly with plugin functionality."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"This is the first step. I'm in a position to start developing, because the dependencies I need are all now installed by the one package... they just aren't yet configured by it. We might cover configuring Vue plugins in another post soon, but I'm calling this one here. I have some tidying up and some developing to do."}]}]},dir:ao,path:"\u002Fblog\u002Freworking-tnt-without-nuxt",extension:ap,createdAt:M,updatedAt:M},{slug:"the-perfect-open-source-web-architecture",description:"Open source software should be free for all, easy to develop and easy to deploy",title:"In Consideration of the Perfect Open Source Architecture for Web-based Apps",authors:[ah],date:"2021-08-21T14:51:08.000Z",categories:[ad],series:[ai],tags:null,toc:[{id:dz,depth:as,text:dA},{id:dB,depth:as,text:dC},{id:dD,depth:as,text:dE}],body:{type:aj,children:[{type:b,tag:h,props:{},children:[{type:a,value:"In my blog post yesterday I declared my intention to make three web-apps - "},{type:b,tag:B,props:{},children:[{type:a,value:"Hosted"}]},{type:a,value:bq},{type:b,tag:B,props:{},children:[{type:a,value:"Marmalade"}]},{type:a,value:a_},{type:b,tag:B,props:{},children:[{type:a,value:"Dynamite CMS"}]},{type:a,value:" - each of which would be built on, "},{type:b,tag:B,props:{},children:[{type:a,value:"probably"}]},{type:a,value:", Ruby on Rails. That part is... a little selfish. I mean it makes sense; Ruby is a beloved language with a lot of support and development in the open source community. But also... it's the language that my career is based on, and that's the main reason I'm pushing for it. Which again... makes sense. I've worked with Ruby for about ten years, so I of course should run with it as my experience will be of great benefit while managing such a project. That said, it doesn't couple with Nuxt as I'd hoped it might... and other backends like Node.js' Express do. I know for a fact I want what at least functions like a single-repository installation - one click deploys and all that good stuff; essentially something that behaves like a monorepo. If I really want to use Nuxt then... well, the choice should probably be Express. I can couple Vue, the framework Nuxt is based on, with Rails just fine but... do I lose the capability to offer a frontend only install? Say for anyone wanting to deploy their own frontend but using a hosted API? Or for packaging the project as a desktop or mobile app. That is possible with Rails, but a JavaScript Single Page Application (SPA) is probably preferred, right?"}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Mainly I'm muddling through all of these questions because I have a contradiction of wants: I want to use Rails, I want to use Nuxt. I can't use both unless... they're separate repositories, and then I lose some ease of installation. As a compromise, I can use Vue in place of Nuxt but I wouldn't have access to my own TNT project unless I modified it extensively... which I'm not ruling out, but that will be a later consideration. Okay, but let's try to reconcile this. What is my philosophy for open source application development? And how do I match that philosophy in application?"}]},{type:a,value:f},{type:b,tag:at,props:{id:dz},children:[{type:b,tag:F,props:{ariaHidden:Z,href:"#the-philosophy",tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:dA}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Okay, so these are hobby projects and I want them to be..."}]},{type:a,value:f},{type:b,tag:bB,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Free Software"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Open Source"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Easy to install"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Easy to develop"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Free doesn't necessarily mean absolutely free, but I do mean free as in both liberty and beer. Developers should be able to take the project, adapt it, redistribute it, and they should be able to run it without having to pay. There'll be some caveats to how "},{type:b,tag:B,props:{},children:[{type:a,value:"free"}]},{type:a,value:" it is dependent upon choice of "},{type:b,tag:B,props:{},children:[{type:a,value:"free software"}]},{type:a,value:bt},{type:b,tag:B,props:{},children:[{type:a,value:"open source"}]},{type:a,value:" license, and running it at no cost will be possible but likely to run into hosting costs eventually - the point being there's no payment required to actually use the open source software. And it should be open source, meaning developers can read the source code, contribute to it, creating extensions of it. To ensure that it is easy to develop, the code should be well written, well documented and ultimately well tested. All of this is the easy part."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"The hard part is ease of installation. I don't want any developer or other user to have to install several different parts just to get the application running. If they want to host and run the software, this should ideally be a one-click process. Similarly, if they want to run the frontend elsewhere and benefit from someone else's hosting (either paid or provided freely), this too should ideally be a one-click process with ideally only one or two details to configure (the host domain for the backend). Maybe it should have a default host, meaning a true one-click deploy but potentially giving favourable weight to my own hosted solution... or maybe it should ideally also run without requiring a backend. That isn't always possible, but a lot of applications could in fact work with just browser storage alone - this may work with one of the three I'm planning here."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So, it should be free to use, free to modify and redistribute, open to contributions with a clear process and good documentation, and it should install with minimal effort. How do we achieve that?"}]},{type:a,value:f},{type:b,tag:at,props:{id:dB},children:[{type:b,tag:F,props:{ariaHidden:Z,href:"#the-application",tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:dC}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"In order to keep the software free (as in liberty and beer), we just need to choose the right license. As well as the right license, I'll also want to encourage donations and sponsorships so that continuous development can be justified without the end user having to pay anything to use the software. Broadly... there should be options. Like, I can't right now justify hosting an online application for any number of users at no cost to them; but I will always be able to justify making that software free for them to install and host themselves. Perhaps a ways down the line, we can have a paid service model that offers managed hosting, but I'll always keep the core, open source project free in the sense of both liberty and beer."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Ease of development is very much a case of keeping code well-written, well-documented and well-tested. In these efforts, we will benefit from the underlying tech stack being well-supported and loved by the community. I've pretty much settled on Ruby and Vue for the back and front end respectively - these both have large, supportive communities. Ease of development then is just a matter of ensuring that the code always remains clear, documented and tested. It also ties into whether or not the software is easy to install; ideally, a developer should be able to pull the project once and get it running without any unconventional changes in their setup. That is to say, if they have Ruby and they have Node installed, this should run on their system no problem. The rest of the stack, then, should be environment agnostic. "},{type:b,tag:B,props:{},children:[{type:a,value:"Maybe"}]},{type:a,value:" there are some configurations I do need to make, like favouring a certain database, but we'll aim to avoid this as much as possible."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"What does that leave? Ease of installation, which is the same as ease of deployment really. And when I speak about deployment, I want it to mean to varied environments. For instance, to the web - that's the easy part - to desktop applications and to mobile. Now, I've deployed Vue apps as desktop and mobile apps in the past, but this - "},{type:b,tag:B,props:{},children:[{type:a,value:bD}]},{type:a,value:" - requires a little bit of decoupling from the Ruby on Rails backend. I see two applications here:"}]},{type:a,value:f},{type:b,tag:bB,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"The Vue application, capable of running in browser or in a wrapper as either a desktop or mobile application."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"The Ruby backend, which serves both an API as well as the Vue application if it is navigated to via HTTP."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"And both of these should be runnable with a single-click installation, but importantly the Vue app that the Ruby backend does serve is the same as the first application."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So then... two projects? The Vue application itself, then the Ruby backend which includes that application as a dependency or perhaps as a submodule? ... Maybe. The problem with a dependency approach is that it does run counter to one ease of development principle; if a dev goes looking to modify the frontend but the frontend is an external dependency, suddenly they need to install and perhaps even fork an entirely separate application. I just need to decide whether this is two repos or just the one monorepo."}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Honestly, didn't think I'd go this way but I am leaning towards trying to put this together as a monorepo. The frontend would sit in a dedicated directory, and the root "},{type:b,tag:g,props:{},children:[{type:a,value:aA}]},{type:a,value:" file could list all of the scripts and dependencies needed for both aspects of the project. However... I'm undecided and I think I will go with two separate repositories initially, if only because it's a pattern I've worked with before."}]},{type:a,value:f},{type:b,tag:at,props:{id:dD},children:[{type:b,tag:F,props:{ariaHidden:Z,href:"#in-summary",tabIndex:ak},children:[{type:b,tag:c,props:{className:[al,am]},children:[]}]},{type:a,value:dE}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"So in conclusion... We have a sort of checklist of considerations and answers to those considerations:"}]},{type:a,value:f},{type:b,tag:bg,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Choose a license (I'll probably stick with MIT initially but change it up later if it makes sense)"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Keep it well documented, well tested and open"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Separate the front and backend, but relate via dependency for ease of installation of every aspect of the application"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Monorepo or separate repos? (We'll go with separate for the time being, but a monorepo does sound attractive - can change this later)"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:h,props:{},children:[{type:a,value:"Gonna continue to detail the process as I build this out in future blog entries."}]}]},dir:ao,path:"\u002Fblog\u002Fthe-perfect-open-source-web-architecture",extension:ap,createdAt:M,updatedAt:M}],_img:{}}],fetch:{},mutations:void 0}}("text","element","span","token","punctuation","\n","code","p"," ","operator","div","nuxt-content-highlight","pre","line-numbers",":",",","string","function",".","{","}","(",")","property-access","language-text","keyword","module","em","li","\n  ","method","a","maybe-class-name","\n    ","nofollow","noopener","noreferrer","_blank","2021-09-07T05:23:31.392Z","import","language-js","Vue","=","[","]","\u002F","regex-delimiter","TNT","from","\n\n","comment","true","\n      ",";","use","\n          ","require","Journal","imports","VueMeta","tag","Thom Bruce","My Process","root",-1,"icon","icon-link","property","\u002Fblog",".md","\u002F\u002F ...","\n        ",2,"h2","constant","exports","regex","regex-source","language-regex","anchor","package.json","Vue.js","NuxtJS","parameter","api","\n            ","boolean","Reworking TNT","Dynamite"," options","special-escape","escape","$","\"","\u003E","data-theme","...","'vue-meta'","'@thombruce\u002Ftnt'","hr","arrow","=\u003E","end","main.js","const","\n  plugins"," and ","language-json","almost","export","default","install","'vue'","https:\u002F\u002Fgithub.com\u002Fjaeming\u002Fvue-cli-plugin-pug","ul","strong","rule","\\.","vue","resolve","'pug-plain-loader'","src\u002Fmain.js","tailwind.config.js","yarn install",", ","nuxt","yarn upgrade @thombruce\u002Ftnt --latest"," or ","@thombruce\u002Ftnt","index.js"," file:","function-variable","loader","postcss","plugins","ol","Vue.use(TNT)","I think","false","new","class-name","language-html","\u003C","attr-name","attr-value","attr-equals","src\u002Findex.js","\n        test","'@tailwindcss\u002Fforms'","yarn link","yarn serve","atrule","@tailwind","\u003Chtml\u003E","script","Lerna","the-setup","The Setup","In ","nuxt-link","\u002Fblog\u002Ftnt-monorepo","\"workspaces\"","\"packages\u002F*\"","packages\u002F","lerna.json","workspaces"," is ","useWorkspaces","build","https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt","\u002Ftnt","tnt\u002Fmain","reworking-tnt-vue-cli","my last entry","blockquote","This installs TNT, Tailwind, DaisyUI, Pug, Lodash, Luxon and Vue Meta. My next step is to flesh this thing out with those features I wanted to bring across from Nuxt in the first place. And that ends this short blog series.","\"scripts\"","\"build\"","if","initialising-the-plugin","Initialising the Plugin","install-dependencies","Install Dependencies","integration-logic","Integration Logic","reworking-tnt-vue-plugin-part-2","vue add tnt","https:\u002F\u002Fcli.vuejs.org\u002Fdev-guide\u002Fplugin-dev.html","https:\u002F\u002Fcli.vuejs.org\u002Fguide\u002Fplugins-and-presets.html#installing-plugins-in-an-existing-project",".gitignore","https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fvue-cli-plugin-tnt","pug-plain-loader",".pug","https:\u002F\u002Fgithub.com\u002Fjaeming\u002Fvue-cli-plugin-pug\u002Fblob\u002Fmaster\u002Findex.js","method-variable","\n    webpackConfig","'pug'","pug","\n\n        ","oneOf","^","\\?","'pug-plain'","'raw-loader'","spread","configs","\n\n  api","generateConfig","quick-aside","Quick Aside","reworking-tnt-vue-plugin-part-1","src\u002FApp.vue","App","h","index.html","\u003C\u002F","VueLoaderPlugin","\"vue-loader\"","\n            use","\n                  ","\n  purge","\n    options","\n      safelist","\n    extend","'daisyui'","postcss.config.js","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Fconfiguration#using-a-different-file-name","https:\u002F\u002Fgithub.com\u002Fpostcss\u002Fpostcss-load-config\u002Fissues\u002F55#issuecomment-266375307","vue add pug","reworking-tnt-vue-meta","https:\u002F\u002Fvuejs.org\u002Fv2\u002Fguide\u002Fplugins.html","reworking-tnt-without-nuxt","public\u002Findex.html"," and...","creating-dynamite","Creating Dynamite","NuxtLink","\u003CNuxt \u002F\u003E","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Fguides\u002Fvue-3-vite","html","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Finstallation#post-css-7-compatibility-build","the-philosophy","The Philosophy","the-application","The Application","in-summary","In Summary")));