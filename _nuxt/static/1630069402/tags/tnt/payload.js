__NUXT_JSONP__("/tags/tnt", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba){return {data:[{term:{slug:"tnt",title:$,path:"\u002Ftags\u002Ftnt"},articles:[{slug:"reworking-tnt-without-nuxt",description:"Reconfiguring my Nuxt template module so that it also works with Vue.js",title:"Reworking TNT: Thom's Nuxt Template without Nuxt",authors:[am],date:"2021-08-26T22:36:35.000Z",categories:["Journal"],series:["My Process"],tags:["Vue.js","NuxtJS",$,"Dynamite"],toc:[{id:an,depth:E,text:ao}],body:{type:ap,children:[{type:b,tag:g,props:{},children:[{type:a,value:"If you don't already know, TNT is a work in progress Nuxt module I've been working on to simplify the setup of my Nuxt projects. It comes with TailwindCSS and DaisyUI, each with some pre-configurations so that things like theme-switching and CSS purging work. It also comes with the Nuxt Font Awesome module, my own Nuxt Taxonomies project, Lodash, Luxon and Pug... and it insists that Nuxt Content should be a peer dependency (meaning it doesn't install it itself, but your project would be expected to have it installed separately). So a lot of that is Nuxt-specific, but I would like to use Pug, Luxon, Lodash and Tailwind as common dependencies of my Vue projects too. And I would like many of the components I've written or will write for TNT to be available to Vue.js projects as well. What does this mean? Well... I'm going to have to do some rewriting. Ideally, I don't want to be maintaining two wholly distinct libraries to roughly do the same thing for two frameworks, particularly while the frameworks are very closely related. Instead... I either want one library that can be installed in projects of either framework, or I want my Nuxt-specific library to inherit from the Vue one, given that Nuxt is really just an extension of Vue. That's easier said than done. Like I said, this little library is heavily dependent on Nuxt at the moment. And it's possible we'll lose some of the desirable features of those Nuxt versions of libraries by replacing them with either packages made for just Vue instead, or general-purpose ones intended for any NPM-managed project. We'll have to ask the questions: What am I losing by replacing Nuxt Tailwind with just TailwindCSS? What am I losing by replacing Nuxt Font Awesome with Vue Font Awesome or with just Font Awesome? How do we reconcile the inclusion of Nuxt Taxonomies in Vue projects it's completely irrelevant to? If those losses are undesirable or even impermissible, what is the best approach to separate out Nuxt dependencies whilst keeping the core part of TNT's development in one place?"}]},{type:a,value:e},{type:b,tag:F,props:{id:an},children:[{type:b,tag:z,props:{href:"#creating-dynamite",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:ao}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So, one small part of the reason I started TNT is that I thought such a template could ultimately be useful for creating websites for clients. It currently features two distinct styles of layout and, thanks to DaisyUI, more than a dozen themes. It's intended to be versatile, then. It's also intended to permit me to stop overthinking decisions about UI frameworks and CSS libraries. TailwindCSS makes every component very customisable, while DaisyUI provides a solid foundation for making those customisations. TNT, I thought, would be a strong starting point for any of my projects, whether it be a simple blogging website or a rich application dashboard. And honestly it's well on its way. But it's Nuxt dependent, and not all of my Vue projects will be Nuxt ones. At least I never intended for that to be the case, and now that I've reviewed how I might integrate a Vue or Nuxt frontend with a Rails backend... I don't think it can be. So, I need a new Vue project to play around with. For that, I'm going to make a start on Dynamite CMS, a sort of cousing to my TNT project - it's a content management system intended to work in particular with content websites created using TNT. We'll see if that intention remains the same as the project progresses, for now I just need a simple Vue application where I can play with my TNT template library. Let's create that..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"vue create dynamite-ui\ncd dynamite-ui\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The "},{type:b,tag:h,props:{},children:[{type:a,value:"vue"}]},{type:a,value:" command depends on Vue CLI being installed and runs an interactive menu allowing me to choose various options. Most of these aren't relevant to the discussion, except that I am specifically "},{type:b,tag:t,props:{},children:[{type:a,value:"not"}]},{type:a,value:" initialising the project with a CSS pre-processor. The project will be using TailwindCSS, PostCSS and - I think - PurgeCSS, which can't be installed that way. Plus, they will be part of TNT, not the parent project."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Here's what I'm thinking comes next..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add --dev https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This will install TNT, which I know I've said will be incompatible with Vue... but I don't really know just "},{type:b,tag:t,props:{},children:[{type:a,value:"how incompatible"}]},{type:a,value:" it will be. Maybe this way I can get a sense of what works, what doesn't, and what I need to change."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Predictably after running that command, there are a lot of things installed that I do not want. So I'm gonna jump on over to TNT..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\ngit co -b vue\ngit push --set-upstream origin vue\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I've also checked out a brand new branch called 'vue' and set the upstream branch on GitHub to this new branch. Not exactly what that means, but if you're unfamiliar with Git or version control at all... essentially now I can make as many modifications as I want without losing the previous state, which is saved as a separate branch on GitHub. Used properly, you always maintain a detailed history with version control meaning you can reset the project at any time to any previous point in time. It also facilitates collaboration, testing, etc. If you're a developer not using version control, start."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"What next? Now I need to do what I just said and butcher TNT a little. Remove all the Nuxt dependencies and replace them with Vue or non-framework-specific ones."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The main script aside, the TNT project essentially consists of four folders: assets, components, layouts and plugins. Of these, assets and plugins should have no problems. We can incorporate their contents into a Vue project with relative ease. In my components and layouts folders, however... well, let's ignore layouts for now - it actually is Nuxt specific. The components folder, however, has several instances of "},{type:b,tag:h,props:{},children:[{type:a,value:aq}]},{type:a,value:" and the "},{type:b,tag:h,props:{},children:[{type:a,value:ar}]},{type:a,value:" component being used. We can ignore the instances of the "},{type:b,tag:h,props:{},children:[{type:a,value:ar}]},{type:a,value:" component, as these are layout-specific, but those NuxtLinks do need to be addressed before the same components will work in Vue. That part's easy; for the most part, "},{type:b,tag:h,props:{},children:[{type:a,value:aq}]},{type:a,value:" just becomes "},{type:b,tag:h,props:{},children:[{type:a,value:"RouterLink"}]},{type:a,value:"... "},{type:b,tag:t,props:{},children:[{type:a,value:"I think that still works in Nuxt..."}]},{type:a,value:" But actually there are a lot of other problems with these components: uses of the "},{type:b,tag:h,props:{},children:[{type:a,value:"fetch()"}]},{type:a,value:" hook, uses of Nuxt Content, Nuxt Taxonomies and some Nuxt variables. I don't want to sacrifice some of that, so I've made a decision..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"There will at least be two directories (probably two separate libraries). One for Vue components, and one for Nuxt components. The Nuxt components will use, inherit from and extend the Vue ones with Nuxt functionality. The Vue ones will be more general purpose, unable to utilise some of Nuxt's features."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So we probably want to start a new project entirely. TNT should be general purpose, working for both Vue and Nuxt; a separate project, "},{type:b,tag:t,props:{},children:[{type:a,value:"Nuxt TNT"}]},{type:a,value:", should expand upon it. "},{type:b,tag:t,props:{},children:[{type:a,value:"Decision made!"}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I've moved "},{type:b,tag:h,props:{},children:[{type:a,value:as}]},{type:a,value:" to "},{type:b,tag:h,props:{},children:[{type:a,value:"@thombruce\u002Fnuxt-tnt"}]},{type:a,value:" and have started a brand new project in the old namespace. The docs remain in the "},{type:b,tag:h,props:{},children:[{type:a,value:as}]},{type:a,value:" repo, but other than that it is barebones at the moment. Time to start migrating some components and picking out our dependencies. I won't worry for now about having Nuxt TNT inherit from the new project - that can be left as an exercise for later. For now, I'm simply aiming to get some of that TNT goodness to work for Vue projects not using Nuxt."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"After some messing around, I have a clean TNT repository with no code. But it's pushed to GitHub, so jumping back across to my new Dynamite UI project, I can install this empty package..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn remove @thombruce\u002Ftnt\nyarn cache clean # To clean up any references to the old version and its Git history\nyarn add https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ftnt\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I've removed the old and installed the new. Now I want to be able to actively develop this and see the results on my own machine without having to push the dependency. Fortunately, there's "},{type:b,tag:h,props:{},children:[{type:a,value:at}]},{type:a,value:K}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn link\ncd ..\u002Fdynamite-ui\nyarn link @thombruce\u002Ftnt\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, Dynamite UI will use the local, linked version of TNT in development on my machine, so any changes I make will be applied almost immediately (definitely immediately if I have Hot Module Replacement up and running). Time to start actually adding dependencies and components to this thing!"}]},{type:a,value:e},{type:b,tag:"hr",props:{},children:[]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The first dependency I want to install is Pug. I don't know how easy this is going to be though. Usually I can just "},{type:b,tag:h,props:{},children:[{type:a,value:"vue add pug"}]},{type:a,value:" and depend on Vue CLI's implementation, but as I'm working on a plugin I think I'll take my old approach..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn add pug pug-plain-loader\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, that's - I think - all that's required to get Pug working in the TNT plugin. Unfortunately I don't know if the new dependency will be installed over on Dynamite UI as a linked module... I may need to push TNT and "},{type:b,tag:h,props:{},children:[{type:a,value:"yarn upgrade @thombruce\u002Ftnt --latest"}]},{type:a,value:". "},{type:b,tag:h,props:{},children:[{type:a,value:at}]},{type:a,value:" was maybe not made for managing nested dependencies - it wasn't. But if I do remember rightly, Vue should have no problem with just the addition of pug and pug-plain-loader to dependencies. I think Webpack detects their presence, and so no additional config will be needed... at least once I do get this properly installed over on Dynamite UI. But since I need to push and then upgrade, I may as well get a few other dependencies installed too. I certainly want..."}]},{type:a,value:e},{type:b,tag:P,props:{},children:[{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Pug"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"TailwindCSS"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"TailwindCSS Forms"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"DaisyUI"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Theme Change"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"PostCSS (though I think this is already installed)"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Lodash"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Luxon"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"That's all of the dependencies from Nuxt TNT except the icon libraries and those that are Nuxt-specific. "},{type:b,tag:t,props:{},children:[{type:a,value:"We'll revisit icon libraries later."}]},{type:a,value:" Fortunately the only dependency listed above that I was using a Nuxt-specific version of is TailwindCSS; all others are general purpose. So picking the packages to install is pretty easy..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The TailwindCSS docs suggest an install command of "},{type:b,tag:h,props:{},children:[{type:a,value:"npm install -D tailwindcss@latest postcss@latest autoprefixer@latest"}]},{type:a,value:", which includes PostCSS (we believe already installed) and Autoprefixer, which we definitely want too, so... they join the installation:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add tailwindcss@latest postcss@latest autoprefixer@latest @tailwindcss\u002Fforms daisyui lodash luxon theme-change\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"And since we need to push the project to upgrade it over on Dynamite UI..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"git add .\ngit commit -m \"Install dependencies\"\ngit push\ncd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Checking the Yarn lockfile over on Dynamite UI, I can confirm that my dependencies are properly installed. To be doubly sure that at least Pug is working, I've modified the default app template of Dynamite UI to express itself in Pug format and I'm running "},{type:b,tag:h,props:{},children:[{type:a,value:"yarn serve"}]},{type:a,value:"... Navigating to localhost:8080 in my browser... Yup, that appears to be working!"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I'm also confident that Lodash, Luxon and Theme Change are all installed fine, as I will be importing these directly for the most part and don't need global access to them. They're installed, so they're installed successfully."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"TailwindCSS, PostCSS, Autoprefixer, TailwindCSS Forms and DaisyUI... Those need more configuration, and that's not easy or immediately apparent how to achieve. With Nuxt, I benefited from a bunch of build hooks that I could tap into to: 1. Configure the installation in the TNT package itself, and 2. Allow for this configuration to be overwritten per project."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"It's been a little while since I made a proper Vue plugin, so I don't know what options are available to me. For the time being, I think I'm going to configure TailwindCSS directly in the Dynamite UI project... That way I can get a feel for what sort of configuration needs to made and what I need to be able to overwrite."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"# Still in dynamite-ui\nnpx tailwindcss init -p\ngit add . && git commit -m \"Tailwind: npx tailwindcss init -p\"\n# Modify Tailwind config to enable PurgeCSS\ngit add . && git commit -m \"Tailwind: Configure PurgeCSS\"\n# Configure Tailwind CSS\ngit add . && git commit -m \"Tailwind: Configure default CSS\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"These are the steps detailed at "},{type:b,tag:z,props:{href:au,rel:[aa,ab,ac],target:ad},children:[{type:a,value:au}]},{type:a,value:". I've also committed each step so that I will be able to review my git history and see these changes specifically, and in order."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"TailwindCSS Forms is also very easy to add. Just require it from the plugins section in "},{type:b,tag:h,props:{},children:[{type:a,value:av}]},{type:a,value:" and..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,Q]},children:[{type:b,tag:h,props:{},children:[{type:a,value:aw},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,ax]},children:[{type:a,value:ay}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:R}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:N}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,S]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:N}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Done. Don't forget to commit the change:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"# Add TailwindCSS forms as a Tailwind plugin\ngit add . && git commit -m \"Tailwind: Add Tailwind Forms plugin\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"DaisyUI and and Theme Change are a little more involved. In fact... I never fully got Theme Change working properly with the Nuxt package, though it was close enough - it changed themes, but it didn't successfully load the correct theme on subsequent visits. That's an issue I'll address in the future."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"DaisyUI itself is easy enough to add. Like TailwindCSS Forms, all we need to do is require it as a plugin in our Tailwind config. We'll also safelist the data-theme attribute here so that DaisyUI's themes aren't purged by PurgeCSS:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,Q]},children:[{type:b,tag:h,props:{},children:[{type:a,value:aw},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:K}]},{type:b,tag:c,props:{className:[d,ax]},children:[{type:a,value:ay}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:R}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:"\n  purge"},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:"\n    options"},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:"\n      safelist"},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,"regex"]},children:[{type:b,tag:c,props:{className:[d,aB]},children:[{type:a,value:aC}]},{type:b,tag:c,props:{className:[d,"regex-source","language-regex"]},children:[{type:a,value:T},{type:b,tag:c,props:{className:[d,"anchor",S]},children:[{type:a,value:aD}]}]},{type:b,tag:c,props:{className:[d,aB]},children:[{type:a,value:aC}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:N}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:N}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,S]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,S]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"'daisyui'"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ag}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:N}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Generally, I think it's supposed to be a good idea to require DaisyUI last... The DaisyUI docs say nothing about TailwindCSS Forms, but they do suggest that if we were using TailwindCSS Typography (a plugin for applying typographic styles to content over which we have little markup control) then it should be required after that because it extends some of its styles. We'll just roll with the assumption that DaisyUI should come last unless otherwise specified."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"We also need to add that "},{type:b,tag:h,props:{},children:[{type:a,value:T}]},{type:a,value:" attribute to our HTML tag in "},{type:b,tag:h,props:{},children:[{type:a,value:"public\u002Findex.html"}]},{type:a,value:". There has to be a better way to do this, but for now we'll do this the easy way:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,"language-html"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,"doctype"]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"\u003C!"}]},{type:b,tag:c,props:{className:[d,"doctype-tag"]},children:[{type:a,value:"DOCTYPE"}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,aF]},children:[{type:b,tag:c,props:{className:[d,aF]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"\u003C"}]},{type:a,value:aE}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:"lang"}]},{type:b,tag:c,props:{className:[d,aH]},children:[{type:b,tag:c,props:{className:[d,f,aI]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:U}]}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,aG]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,aH]},children:[{type:b,tag:c,props:{className:[d,f,aI]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:U}]},{type:a,value:"cupcake"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:U}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Let's commit all of that..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"git add . && git commit -m \"Tailwind: Add DaisyUI plugin\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, the issue is Theme Change... I'm actually going to double-back and remove Theme Change for now:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Ftnt\nyarn remove theme-change\ngit add . && git commit -m \"Uninstall theme-change\"\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Why do that? Because actually adding "},{type:b,tag:h,props:{},children:[{type:a,value:T}]},{type:a,value:" directly to the "},{type:b,tag:h,props:{},children:[{type:a,value:"\u003Chtml\u003E"}]},{type:a,value:" tag above is a mess-enough for the time being, and because being able to change the theme on the fly isn't critical to my development. There are things I want to manage before we reach that point."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"But where are we at now?"}]},{type:a,value:e},{type:b,tag:P,props:{},children:[{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"TailwindCSS and DaisyUI should each be properly installed"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Pug we already know is working"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Lodash and Luxon are safely assumed to be ready to use"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This puts me in position to start adding my own templates and components! For the time being, we'll grant that many of the steps above are required to get the TNT plugin working - we'll refine that in the future. The last thing to do at this stage is to create a layout and a component using Tailwind and DaisyUI; and if that works, we've completed this setup."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"One quick copying over of one of my TNT layouts and... Error!"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"Error: PostCSS plugin tailwindcss requires PostCSS 8.\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Not to worry, I've seen this before. In fact, it's an issue that the Tailwind team are aware of an provide a solution to: "},{type:b,tag:z,props:{href:aJ,rel:[aa,ab,ac],target:ad},children:[{type:a,value:aJ}]},{type:a,value:" So then..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn remove tailwindcss postcss autoprefixer\nyarn add tailwindcss@npm:@tailwindcss\u002Fpostcss7-compat postcss@^7 autoprefixer@^9\ngit add . && git commit -m \"Use TailwindCSS Compatibility version\"\ngit push\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This swaps out the latest version of Tailwind for a compatibility version, the same in every way apparently apart from that it maintains compatibility with older versions of PostCSS."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Let's jump back across to DynamiteUI..."}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"cd ..\u002Fdynamite-ui\nyarn upgrade @thombruce\u002Ftnt --latest\nyarn serve\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Success! TailwindCSS is now working, DaisyUI and the chosen theme as well, my custom layout..."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, it isn't ideal. A lot has been done on DynamiteUI that I'd rather be done in the TNT plugin, but this is a start. It's a lot easier to migrate that functionality up the stream so to speak into TNT than it is to fiddle endlessly with plugin functionality."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This is the first step. I'm in a position to start developing, because the dependencies I need are all now installed by the one package... they just aren't yet configured by it. We might cover configuring Vue plugins in another post soon, but I'm calling this one here. I have some tidying up and some developing to do."}]}]},dir:aK,path:"\u002Fblog\u002Freworking-tnt-without-nuxt",extension:aL,createdAt:V,updatedAt:V},{slug:"how-i-build-websites-2021",description:"What goes into one of my static sites in 2021.",title:"How I Build My Websites?",authors:[am],date:"2021-06-21T22:09:01.000Z",categories:[aM],tags:["Nuxt.js",$],toc:[{id:aN,depth:E,text:aO},{id:aP,depth:E,text:aQ},{id:aR,depth:E,text:aS},{id:aT,depth:E,text:aU},{id:aV,depth:E,text:aW}],body:{type:ap,children:[{type:b,tag:g,props:{},children:[{type:a,value:"For the past... I don't actually know how many years, I have been trying to pursue a certain ideal of "},{type:b,tag:t,props:{},children:[{type:a,value:"Convention over Configuration"}]},{type:a,value:". This is the web development philosophy that advocates for having a sort of set of best practices that are repeatable, reproducible, and that emphasise essentially... lazy programming. I am a lazy programmer. It's a good thing, actually. The thing about lazy programmers is not that we're \"lazy\" in the classical sense. We actually work very hard in the present in order to reduce work in the future thanks to having a set of reproducible tools, packages and practises. "},{type:b,tag:t,props:{},children:[{type:a,value:"Conventions"}]},{type:a,value:", that is, that simply drop-in and require little to know "},{type:b,tag:t,props:{},children:[{type:a,value:"configuration"}]},{type:a,value:". As I say, I've been at this for I don't know how many years so it's an ideal that's always changing, my conventions are always evolving. Lately I've been pursuing this on the "},{type:b,tag:"nuxt-link",props:{to:"\u002Fcategories\u002Fjamstack"},children:[{type:a,value:aM}]},{type:a,value:", and in particular in Nuxt.js."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Before I divert to far off the course here, the reason I'm writing this blog post is to explore - step by step - the conventions I've now established for myself as a Nuxt.js developer. I want to do that by detailing below the process as I actually put another site live, from scratch. So I'm going to start with no website, and by the end of this article have a brand new website live on the internet. It won't take very long, because I'm very confident in these conventions I've established. Along the way, I may add a little commentary about improving this process or about where I want to change things in the future. Okay, let's begin. The website I'm going to be building is just called 'Screenplays', and it is essentially just a blogging website like this one, except that it will be built to specifically host some screenplays I wrote back in university. Here we go..."}]},{type:a,value:e},{type:b,tag:F,props:{id:aN},children:[{type:b,tag:z,props:{href:"#creating-the-project",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:aO}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"First up, I'm running what has become a standard for creating Nuxt apps. "},{type:b,tag:h,props:{},children:[{type:a,value:"yarn create"}]},{type:a,value:" accepts a template argument - "},{type:b,tag:h,props:{},children:[{type:a,value:"nuxt-app"}]},{type:a,value:" in this case - and a name for the project which is going to be "},{type:b,tag:h,props:{},children:[{type:a,value:"screenplays"}]},{type:a,value:K}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn create nuxt-app screenplays\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This runs an interactive process, meaning it will ask me a few questions about the setup and what features I desire:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"Project name: screenplays\nProgramming language: JavaScript\nPackage manager: Yarn\nUI Framework: None\nNuxt.js modules: Axios, Progressive Web App, Content\nLinting tools: None\nTesting framework: None\nRendering mode: Universal\nDeployment target: Static\nDevelopment tools: jsconfig.json, Dependabot\nVersion control system: Git\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Key to my setup, I've selected no UI framework, the universal rendering mode and the static deployment target."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The universal rendering mode essentially says \"this Nuxt app should be built as if it is to be rendered by a server\", but that's not actually the case (I'm oversimplifying); the static deployment target effectively adds to that \"and the server rendering it is the build process\". The result of those arguments is that this builds and generates a \"static site\", which is a set of HTML files not actually requiring a server to deploy for public visitation."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The reason I've selected no UI framework isn't actually because none of them interest me - in fact, one of the listed options is Tailwind CSS, which I will be using - but that I've configured everything I would like from a UI framework in a package of my own that I will install momentarily."}]},{type:a,value:e},{type:b,tag:F,props:{id:aP},children:[{type:b,tag:z,props:{href:"#style-and-structure",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:aQ}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The default Nuxt template, even without a style framework, comes with some pages and components that I'll just want to delete. These are:"}]},{type:a,value:e},{type:b,tag:P,props:{},children:[{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"components\u002FLogo.vue"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"content\u002Fhello.md"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"layouts\u002Fdefault.vue"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"pages\u002Findex.vue"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:t,props:{},children:[{type:a,value:"I should delete or replace some stuff in the static directory too, but this is a process in progress."}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Next, I'll add my own package, TNT (it doesn't really stand for anything but is derived from the idea that it's "},{type:b,tag:t,props:{},children:[{type:a,value:"Thom's Nuxt Template"}]},{type:a,value:"):"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fnuxt-tnt --dev\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"And I'll install the module by registering it as a buildModule in nuxt.config.js:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:c,props:{className:[aj]},children:[{type:a,value:ak}]},{type:b,tag:n,props:{className:[o,Q]},children:[{type:b,tag:h,props:{},children:[{type:a,value:aX},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aY}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This installs some custom components, all registered and globally available, it installs Tailwind CSS with a default configuration setup to my liking, it even registers a couple of custom layouts (which is why I was able to delete the default layout above). The one thing it does not install that I wish it did is a set of default pages. This isn't currently possible in Nuxt, but should be in Nuxt version 3 which is currently in active development."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"So, rather than write my own pages, I copy them across from one of my existing projects. In this case, I've copied them from this website into my project. They're specifically designed to be reusable like this. By default they are:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"pages\n├── _taxonomy\n│   └── _term.vue\n├── blog\n│   ├── _slug.vue\n│   └── index.vue\n├── _page.vue\n└── index.vue\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:aZ}]},{type:a,value:" and "},{type:b,tag:h,props:{},children:[{type:a,value:"_taxonomy"}]},{type:a,value:" are pretty special. "},{type:b,tag:h,props:{},children:[{type:a,value:aZ}]},{type:a,value:" is polymorphic and will act like page with a dynamic slug at the root of the site "},{type:b,tag:t,props:{},children:[{type:a,value:"or"}]},{type:a,value:" as a taxonomy index; the taxonomy slug can also be dynamic. This saves me having to create very similar pages for tags, categories, series... that kind of thing. In the case of my screenplays project, I don't actually want the blog pages, so I'll rename that directory to 'screenplays' and replace the two occurrences of the word 'blog' in those files with that as well. Those two occurrences actually pertain to the content directory, so with that change made..."}]},{type:a,value:e},{type:b,tag:F,props:{id:aR},children:[{type:b,tag:z,props:{href:"#adding-my-content",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:aS}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Like I said, this is a site for some screenplays I wrote back in university. Back then I used Final Draft and Celtx, two leading script writing platforms with proprietary formats where that format is also... binary. But I've converted all of them to the open source Fountain format more recently, which is a text file format like Markdown (based on Markdown in fact). I've also written another package specifically for handling that file format in Nuxt Content, so I'm just going to copy those files into "},{type:b,tag:h,props:{},children:[{type:a,value:"content\u002Fscreenplays"}]},{type:a,value:" and install my "},{type:b,tag:h,props:{},children:[{type:a,value:"vue-fountain"}]},{type:a,value:" package:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add @thombruce\u002Fvue-fountain --dev\n"}]}]}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:c,props:{className:[aj]},children:[{type:a,value:ak}]},{type:b,tag:n,props:{className:[o,Q]},children:[{type:b,tag:h,props:{},children:[{type:a,value:aX},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aY}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"'@thombruce\u002Fvue-fountain\u002Fnuxt'"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This is an extra step I wouldn't normally have to take if it were a standard, markdown-based static blogging site, but it is a step I do take here for my screenplays. But in fact... that's it."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now having those content files in place, I can navigate to them when I boot up the dev site with "},{type:b,tag:h,props:{},children:[{type:a,value:"yarn dev"}]},{type:a,value:". Those pages are generated and exist. If it were a more straightforward blogging site, I'd just create Markdown files and be rolling."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This site is ready to deploy!"}]},{type:a,value:e},{type:b,tag:F,props:{id:aT},children:[{type:b,tag:z,props:{href:"#ready-for-launch",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:aU}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"I could at this point simply run "},{type:b,tag:h,props:{},children:[{type:a,value:"yarn generate"}]},{type:a,value:", which would build my website and put all of the files I need into a "},{type:b,tag:h,props:{},children:[{type:a,value:W}]},{type:a,value:" folder. Then I could drag and drop that directory into a hosting service like Netlify.com and "},{type:b,tag:t,props:{},children:[{type:a,value:"just like that"}]},{type:a,value:" my site would be live. But I want a couple of extra things. In consideration of hosting a website, I want:"}]},{type:a,value:e},{type:b,tag:P,props:{},children:[{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Source control"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Continuous integration"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Hosting"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"The hosting part we've just discussed. I will in fact be using Netlify, but I won't be dragging and dropping the dist folder into their deploy window. In order to achieve the criteria of a source controlled site with continuous integration, I'll also be using GitHub and GitHub Actions. Those familiar with Netlify might ask, "},{type:b,tag:t,props:{},children:[{type:a,value:"why GitHub Actions instead of Netlify's automated deployments?"}]},{type:a,value:" A fair question. I would in fact prefer to use Netlify's automated deployments, because their service is fantastic, but I want to benefit from GitHub's unlimited free build minutes for open source projects."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"To achieve this, I need a GitHub Actions Workflow for which I again have a standard template that I'll copy and paste:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:c,props:{className:[aj]},children:[{type:a,value:".github\u002Fworkflows\u002Fdeploy.yml"}]},{type:b,tag:n,props:{className:[o,"language-yml"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" deploy\n\n"},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"on"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"push"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"branches"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:" main\n\n"},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"jobs"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"deploy"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"runs-on"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:" matrix.os "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"strategy"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"matrix"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"os"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:a,value:"ubuntu"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"latest"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"node"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,"number"]},children:[{type:a,value:"14"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"steps"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Checkout\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" actions\u002Fcheckout@master\n      "},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:"# https:\u002F\u002Fgithub.com\u002Factions\u002Fcheckout\u002Fissues\u002F165#issuecomment-657673315"}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Create LFS file list\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" git lfs ls"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"files "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"l "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:a$}]},{type:a,value:" cut "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"d' ' "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"f1 "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:a$}]},{type:a,value:" sort "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ai}]},{type:a,value:" .lfs"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"id\n      "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Restore LFS cache\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" actions\u002Fcache@v2\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"id"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" lfs"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"cache\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"path"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" .git\u002Flfs\n          "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:" runner.os "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"lfs"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:" hashFiles('.lfs"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"id') "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"v1\n      "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Git LFS Pull\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" git lfs pull\n\n      "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Setup node env\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" actions\u002Fsetup"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"node@v2.1.2\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"node-version"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:" matrix.node "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:"\n\n      "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Install dependencies\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" yarn\n\n      "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Generate\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" yarn run generate\n\n      "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:q},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" Deploy\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" peaceiris\u002Factions"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"gh"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:a,value:"pages@v3\n        "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"github_token"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:u}]},{type:a,value:" secrets.GITHUB_TOKEN "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"publish_branch"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" dist\n          "},{type:b,tag:c,props:{className:[d,j,k]},children:[{type:a,value:"publish_dir"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:" .\u002Fdist\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Now, when I push to GitHub, this workflow will build the site and commit the result to a separate branch called "},{type:b,tag:h,props:{},children:[{type:a,value:W}]},{type:a,value:K}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"At this point I can create a new repository on GitHub and:"}]},{type:a,value:e},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,r]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"git add . && git commit -m \"Ready to launch!\"\ngit remote add origin https:\u002F\u002Fgithub.com\u002Fthombruce\u002Fscreenplays.git\ngit push -u origin main\n"}]}]}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"When the workflow is complete, I can create a new site on Netlify linked to the repo and publish straight from the "},{type:b,tag:h,props:{},children:[{type:a,value:W}]},{type:a,value:" branch."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Done!"}]},{type:a,value:e},{type:b,tag:F,props:{id:aV},children:[{type:b,tag:z,props:{href:"#wrapping-up",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:aW}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"Okay, so if I weren't also typing this up this process would have taken me what... about twenty minutes? No more, certainly. That's largely thanks to having so much of my personal configuration written into my TNT module for reuse. There are some problems and some things I left out. For instance... I've also had to add a "},{type:b,tag:h,props:{},children:[{type:a,value:"tnt.config.js"}]},{type:a,value:" file and slightly modify "},{type:b,tag:h,props:{},children:[{type:a,value:ak}]},{type:a,value:" to import it; ideally TNT would handle that import itself, and even more ideally it would have some fallback configuration that would be used if the file didn't exist. That's a chore for me yet to take on, but shouldn't be too tricky, hence I left it out of my write-up because I don't know that it will remain relevant for long. I've also had to do some other specific customisations that were specific to this site handling screenplays; those aren't typically relevant to a site build, so I omitted them. I also still need to install Git LFS - something I typically do to handle things like image files - and do some of my own style customisations for the site, mainly by adding a "},{type:b,tag:h,props:{},children:[{type:a,value:av}]},{type:a,value:" file and modifying some configuration there."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"As I mentioned when copying across page templates, a Nuxt module like TNT cannot currently offer a set of custom pages but this is supposed to become possible with Nuxt 3. Strictly it is achievable by injecting some custom routes... but this doesn't result with an easily overwritable behaviour. That's one of the perks of TNT - any of its components can be overwritten simply by creating your own component existing at the same path in your project directory. I want that for pages too, and so I'm eagerly awaiting Nuxt 3 at which point I think I'll be able to \"finish\" TNT to my liking and maybe make it more useful to others too."}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"In less than the time it took me to write those two paragraphs of wrapping up, my GitHub workflow was complete so I have:"}]},{type:a,value:e},{type:b,tag:"ol",props:{},children:[{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Created a site on Netlify from the "},{type:b,tag:h,props:{},children:[{type:a,value:W}]},{type:a,value:" branch of my GitHub repo"}]},{type:a,value:e},{type:b,tag:s,props:{},children:[{type:a,value:"Added a custom domain to my DNS records pointing at that site"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"This took less than a minute. It'll take a little longer for the DNS to propagate and for Netlify to provision an SSL certificate, though this is typically pretty quick too. By the time anyone reads this, the site should be available at "},{type:b,tag:z,props:{href:"https:\u002F\u002Fink.thombruce.com\u002F",rel:[aa,ab,ac],target:ad},children:[{type:a,value:"ink.thombruce.com"}]},{type:a,value:K}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"That's a basic blogging website done in under twenty minutes. The template has a minimalist kinda style which I still need to work on (I'm more developer than designer), and there are some other kinks to work out yet too, but that's... that's it. I have this process down to a tee. This is what proactive laziness looks like. 😅"}]}]},dir:aK,path:"\u002Fblog\u002Fhow-i-build-websites-2021",extension:aL,createdAt:V,updatedAt:V}],_img:{}}],fetch:{},mutations:void 0}}("text","element","span","token","\n","punctuation","p","code",":","key","atrule","div","nuxt-content-highlight","pre","line-numbers","-"," ","language-text","li","em","{","}","\n  ",",","name","a","operator","[","\n    ","]",2,"h2","true",-1,"icon","icon-link",".","comment","string","\u002F\u002F ...","\n      ","ul","language-js","=","function","data-theme","\"","2021-08-27T13:01:45.309Z","dist"," $","uses","run","\n          ","TNT","nofollow","noopener","noreferrer","_blank","require","(",")","\n        ","\u003E","filename","nuxt.config.js","with","Thom Bruce","creating-dynamite","Creating Dynamite","root","NuxtLink","\u003CNuxt \u002F\u003E","@thombruce\u002Ftnt","yarn link","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Fguides\u002Fvue-3-vite","tailwind.config.js","module","property-access","exports","\n  plugins","'@tailwindcss\u002Fforms'","regex-delimiter","\u002F","$","html","tag","attr-name","attr-value","attr-equals","https:\u002F\u002Ftailwindcss.com\u002Fdocs\u002Finstallation#post-css-7-compatibility-build","\u002Fblog",".md","Jamstack","creating-the-project","Creating the Project","style-and-structure","Style and Structure","adding-my-content","Adding My Content","ready-for-launch","Ready for Launch!","wrapping-up","Wrapping Up","buildModules","'@thombruce\u002Fnuxt-tnt'","_page","\n\n    ","|","assets")));